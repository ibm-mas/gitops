{{- if not (empty .Values.docdb) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  # Job will be recreated (and thus rerun) any time docdb config is changed
  # If this happens, the old user will NOT be cleaned up, but I think we can live with this for now
  # In future we could look at stashing the old docdb config in an AWS secret and make sure this Job cleans up
  # those creds if the secret is present.
  name: aws-docdb-process-user-sync-role-{{ .Values.docdb | toYaml | adler32sum }}"
  namespace: mas-{{ .Values.instance.id }}-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "02"
spec:
  template:
    metadata:
      labels:
        app: "sync-job"
    spec:
      containers:
        - name: aws-docdb-process-user
          image: quay.io/ibmmas/cli:8.1.0-pre.gitops
          imagePullPolicy: IfNotPresent
          env:

            - name: ACCOUNT_ID
              value: "{{ .Values.account.id }}"
            - name: CLUSTER_ID
              value: "{{ .Values.cluster.id }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance.id }}"

            - name: DOCDB_HOST
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_host
            - name: DOCDB_PORT
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_port
            - name: DOCDB_MASTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_username
            - name: DOCDB_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_password
            - name: DOCDB_MASTER_INFO
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_info

            - name: DOCDB_INSTANCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_instance_username
            - name: DOCDB_INSTANCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_instance_password

            - name: SM_AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_default_region
            - name: SM_AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_access_key_id
            - name: SM_AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_secret_access_key

          command:
            - /bin/sh
            - -c
            - |

              set -e
              export MAS_CONFIG_DIR="/tmp/${MAS_INSTANCE_ID}/aws_documentdb_user"
              mkdir -p ${MAS_CONFIG_DIR}

              echo "USER_ACTION=${USER_ACTION}"
              echo "MAS_CONFIG_DIR=${MAS_CONFIG_DIR}"
              echo "MAS_INSTANCE_ID=${MAS_INSTANCE_ID}"
              echo "DOCDB_HOST=${DOCDB_HOST}"
              echo "DOCDB_PORT=${DOCDB_PORT}"

              echo "DOCDB_MASTER_USERNAME=${DOCDB_MASTER_USERNAME:0:2}<snip>"
              echo "DOCDB_MASTER_PASSWORD=${DOCDB_MASTER_PASSWORD:0:2}<snip>"
              echo "DOCDB_MASTER_INFO=${DOCDB_MASTER_INFO}"

              echo "DOCDB_INSTANCE_USERNAME=${DOCDB_INSTANCE_USERNAME:0:2}<snip>"
              echo "DOCDB_INSTANCE_PASSWORD=${DOCDB_INSTANCE_PASSWORD:0:2}<snip>"

              echo "SM_AWS_REGION=${SM_AWS_REGION}"
              echo "SM_AWS_ACCESS_KEY_ID=${SM_AWS_ACCESS_KEY_ID:0:2}<snip>"
              echo "SM_AWS_SECRET_ACCESS_KEY=${SM_AWS_SECRET_ACCESS_KEY:0:2}<snip>"

              if [[ -z "${DOCDB_INSTANCE_USERNAME}" || "${DOCDB_INSTANCE_USERNAME}" == "" ]]; then
                export DOCDB_INSTANCE_USERNAME=masinst_${MAS_INSTANCE_ID}
                echo "DOCDB_INSTANCE_USERNAME=${DOCDB_INSTANCE_USERNAME:0:2}<snip>"
              fi

              if [[ -z "${DOCDB_INSTANCE_PASSWORD}" || "${DOCDB_INSTANCE_PASSWORD}" == "" ]]; then
                export DOCDB_INSTANCE_PASSWORD=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 20`
                echo "DOCDB_INSTANCE_PASSWORD=${DOCDB_INSTANCE_PASSWORD:0:2}<snip>"
              fi

              # /opt/app-root/src/run-role.sh aws_documentdb_user
              # rc=$?
              # [ $rc -ne 0 ] && exit $rc

              echo "TODO: Run /opt/app-root/src/run-role.sh aws_documentdb_user"

              source /mascli/functions/gitops_utils
              sm_login

              SECRETS_KEY_SEPERATOR="/"
              export SECRET_NAME_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo
              
              # Setting instance username and password into mongo instance secret, along with Info
              ESCAPED_INFO=${DOCDB_MASTER_INFO//\"/\\\"}
              ESCAPED_INFO=${ESCAPED_INFO//$'\n'/\\n}

              echo "DOCDB_MASTER_INFO (ESCAPED_INFO)=${DOCDB_MASTER_INFO}"
              sm_update_secret $SECRET_NAME_MONGO "{\"info\":\"$ESCAPED_INFO\", \"username\":\"$DOCDB_INSTANCE_USERNAME\", \"password\":\"$DOCDB_INSTANCE_PASSWORD\"}"

      restartPolicy: Never
      serviceAccountName: sync-sa
  backoffLimit: 4
{{- end }}
