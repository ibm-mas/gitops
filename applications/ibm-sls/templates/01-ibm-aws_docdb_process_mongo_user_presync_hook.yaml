{{- if eq .Values.mongodb_provider "aws" }}
{{- if eq .Values.user_action "add" }}
---
apiVersion: v1
kind: Namespace
metadata:
  name: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "1"

---
kind: Secret
apiVersion: v1
metadata:
  name: aws-docdb
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "2"
stringData:
  docdb_master_username: {{ .Values.docdb_master_username }}
  docdb_master_password: {{ .Values.docdb_master_password }}
  docdb_master_info: {{ .Values.docdb_master_info }}
  docdb_instance_username: {{ .Values.sls_mongo_username }}
  docdb_instance_password: {{ .Values.sls_mongo_password }}
type: Opaque

---
kind: Secret
apiVersion: v1
metadata:
  name: aws
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "2"
stringData:
  aws_access_key_id: {{ .Values.sm_aws_access_key_id }}
  aws_secret_access_key: {{ .Values.sm_aws_secret_access_key }}
  aws_default_region: {{ .Values.sm_aws_region }}
type: Opaque

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: presync-sa
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "3"

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: presync-sa
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "4"
subjects:
  - kind: ServiceAccount
    name: presync-sa
    namespace: mas-{{ .Values.mas_instance_id }}-sync-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin

---
# Permit outbound communication by the Job pods
# (Needed to communicate with the K8S HTTP API and AWS SM)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: presync-role-network-policy
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "5"
spec:
  podSelector:
    matchLabels:
      app: "presync-role"
  egress:
    - {}
  policyTypes:
    - Egress

---
apiVersion: batch/v1
kind: Job
metadata:
  name: aws-docdb-process-user-presync-role
  namespace: mas-{{ .Values.mas_instance_id }}-sync-job
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "6"
spec:
  template:
    metadata:
      labels:
        app: "presync-role"
    spec:
      containers:
        - name: aws-docdb-process-user
          image: quay.io/ibmmas/cli:7.10.0-pre.mascore1032v2
          imagePullPolicy: Always
          env:
            - name: USER_ACTION
              value: "{{ .Values.user_action }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.mas_instance_id }}"

            - name: ACCOUNT_ID
              value: {{ .Values.account.id }}
            - name: CLUSTER_ID
              value: {{ .Values.cluster.id }}

            - name: DOCDB_HOST
              value: "{{ .Values.docdb_host }}"
            - name: DOCDB_PORT
              value: "{{ .Values.docdb_port }}"
            - name: MAS_CONFIG_DIR
              value: "/tmp/{{ .Values.mas_instance_id }}/aws_documentdb_user"

            - name: DOCDB_MASTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_username
            - name: DOCDB_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_password
            - name: DOCDB_MASTER_INFO
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_info

            - name: DOCDB_INSTANCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_instance_username
            - name: DOCDB_INSTANCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_instance_password

            - name: SM_AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_default_region
            - name: SM_AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_access_key_id
            - name: SM_AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_secret_access_key

          command:
            - /opt/app-root/src/run-role.sh
            - aws_documentdb_user

          command:
            - /bin/sh
            - -c
            - |

              set -e
              mkdir -p ${MAS_CONFIG_DIR}

              echo "MAS_CONFIG_DIR=${MAS_CONFIG_DIR}"
              echo "MAS_INSTANCE_ID=${MAS_INSTANCE_ID}"
              echo "DOCDB_HOST=${DOCDB_HOST}"
              echo "DOCDB_PORT=${DOCDB_PORT}"

              echo "DOCDB_MASTER_USERNAME=${DOCDB_MASTER_USERNAME:0:5}<snip>"
              echo "DOCDB_MASTER_PASSWORD=${DOCDB_MASTER_PASSWORD:0:5}<snip>"
              echo "DOCDB_MASTER_INFO=${DOCDB_MASTER_INFO}"

              echo "DOCDB_INSTANCE_USERNAME=${DOCDB_INSTANCE_USERNAME:0:5}<snip>"
              echo "DOCDB_INSTANCE_PASSWORD=${DOCDB_INSTANCE_PASSWORD:0:5}<snip>"

              echo "SM_AWS_REGION=${SM_AWS_REGION}"
              echo "SM_AWS_ACCESS_KEY_ID=${SM_AWS_ACCESS_KEY_ID:0:5}<snip>"
              echo "SM_AWS_SECRET_ACCESS_KEY=${SM_AWS_SECRET_ACCESS_KEY:0:5}<snip>"

              if [[ -z "${DOCDB_INSTANCE_USERNAME}" || "${DOCDB_INSTANCE_USERNAME}" == "" ]]; then
                export DOCDB_INSTANCE_USERNAME=masinst_${MAS_INSTANCE_ID}
                echo "DOCDB_INSTANCE_USERNAME=${DOCDB_INSTANCE_USERNAME:0:5}<snip>"
              fi

              if [[ -z "${DOCDB_INSTANCE_PASSWORD}" || "${DOCDB_INSTANCE_PASSWORD}" == "" ]]; then
                export DOCDB_INSTANCE_PASSWORD=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 20`
                echo "DOCDB_INSTANCE_PASSWORD=${DOCDB_INSTANCE_PASSWORD:0:5}<snip>"
              fi

              /opt/app-root/src/run-role.sh aws_documentdb_user
              rc=$?
              [ $rc -ne 0 ] && exit $rc

              source /mascli/functions/gitops_utils
              sm_login

              SECRETS_KEY_SEPERATOR="/"

              export SECRET_NAME_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo

              # Setting instance username and password into mongo instance secret, along with Info
              ESCAPED_INFO=${DOCDB_MASTER_INFO//\"/\\\"}
              ESCAPED_INFO=${ESCAPED_INFO//$'\n'/\\n}

              echo "DOCDB_MASTER_INFO (ESCAPED_INFO)=${DOCDB_MASTER_INFO}"
              sm_update_secret $SECRET_NAME_MONGO "{\"info\":\"$ESCAPED_INFO\", \"username\":\"$DOCDB_INSTANCE_USERNAME\", \"password\":\"$DOCDB_INSTANCE_PASSWORD\"}"

      restartPolicy: Never
      serviceAccountName: presync-sa
  backoffLimit: 0

{{- end }}
{{- end }}
