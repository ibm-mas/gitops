{{- if not (empty .Values.ecr_host) }}

{{- $_cli_image_digest := "sha256:e9384807ec36898ac30e219991b220bdc3fb726bb7c0e1383ef54da4df670e6d" }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ecr-token-updater-role
  annotations:
    argocd.argoproj.io/sync-wave: "02"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - apiGroups:
      - ""
    resources: 
      - secrets
    verbs: 
      - get
      - update
      - patch

---
# Service account that is authorized to read k8s secrets (needed by the job)
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "ecr-token-updater-sa"
  annotations:
    argocd.argoproj.io/sync-wave: "02"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}


---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-token-updater-rolebinding
  annotations:
    argocd.argoproj.io/sync-wave: "03"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: ecr-token-updater-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ecr-token-updater-role



---
kind: CronJob
apiVersion: batch/v1
metadata:
  name: "ecr-token-updater"
  annotations:
    argocd.argoproj.io/sync-wave: "04"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  schedule: '0 */11 * * *'
  suspend: false
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
{{- if .Values.custom_labels }}
          labels:
{{ .Values.custom_labels | toYaml | indent 12 }}
{{- end }}
        spec:
          restartPolicy: OnFailure
          serviceAccountName: "ecr-token-updater-sa"
          containers:
            - name: "ecr-token-updater"
              image: "{{ .Values.cli_image_repo }}@{{ $_cli_image_digest }}"
              imagePullPolicy: IfNotPresent
              env:
                - name: REGION_ID
                  value: {{ .Values.region_id }}
                - name: ECR_HOST
                  value: {{ .Values.ecr_host }}
                - name: AWS_REGION
                  valueFrom:
                    secretKeyRef:
                      name: aws
                      key: aws_default_region
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws
                      key: aws_access_key_id
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws
                      key: aws_secret_access_key
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  
                  echo "- Get ECR Token"
                  ECR_TOKEN=$(aws ecr get-login-password --region ${REGION_ID})
                  ECR_AUTH="AWS:${ECR_TOKEN}"
                  ECR_AUTH_B64=$(echo "${ECR_AUTH}" | base64 -w0 )

                  echo "- Update .dockerconfigjson"
                  # Get the current pull-secret and update .dockerconfigjson with the ECR auth
                  UPDATED_DOCKERCONFIGJSON=$(
                    oc get secret pull-secret  \
                      -n openshift-config \
                      -o json | \
                      jq -r '.data[".dockerconfigjson"]' | \
                      base64 -d | \
                      jq '.auths["'${ECR_HOST}'"] = {"auth": "'${ECR_AUTH_B64}'"}'
                  )

                  echo "- Update pull-secret"
                  oc set data secret/pull-secret \
                    -n openshift-config \
                    .dockerconfigjson="${UPDATED_DOCKERCONFIGJSON}"
{{- end }}
