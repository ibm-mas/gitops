{{- range $key, $value := $.Values.custom_sa_details }}

{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "postsync-custom-sa-update-sm-job" }}

{{- /*
Use the build/bin/set-cli-image-tag.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_tag := "13.13.1" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := printf "%s $s" $key $value }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v1" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_tag
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_tag $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}


{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.
NOTE: this is one of those cases; we need a separate cleanup group for each per-sa-key Job.

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix $key | sha1sum }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: {{ $.Values.custom_sa_namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "064"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if $.Values.custom_labels }}
{{ $.Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if $.Values.custom_labels }}
    metadata:
      labels:
{{ $.Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:{{ $_cli_image_tag }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: ACCOUNT_ID
              value: {{ $.Values.account_id }}
            - name: REGION_ID
              value: {{ $.Values.region_id }}
            - name: CLUSTER_ID
              value: {{ $.Values.cluster_id }}
            - name: CUSTOM_SA_NAME
              value: {{ $key }}
            - name: CUSTOM_SA_NAMESPACE
              value: {{ $.Values.custom_sa_namespace }}
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
          volumeMounts:
            - name: aws
              mountPath: /etc/mas/creds/aws
          command:
            - /bin/sh
            - -c
            - |

              set -e

              # might as well take advantage of gitops_utils for sm_ functions as we're using the cli image
              source /mascli/functions/gitops_utils

              # NOTE: cannot just render AWS secrets into here, as it will be exposed in the ArgoCD UI
              # Instead, we pass them into a secret (ArgoCD knows to hide any data fields in k8s secrets),
              # mount the secret on the jobs filesystem, and read them in here
              SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/aws/aws_access_key_id)
              SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/aws/aws_secret_access_key)
              
              # Get name of secret generated for the custom service account
              echo "Fetching name of secret generated for custom service account ${CUSTOM_SA_NAME}"
              SECRET_NAME=$(oc get secret -n ${CUSTOM_SA_NAMESPACE} | grep ${CUSTOM_SA_NAME}-token | head -1 | cut -d' ' -f1)
              if [[ -z "${SECRET_NAME}" ]]; then
                echo "Failed to fetch secret name"
                exit 1
              fi
              
              # Get secret token to store in sm
              echo "Fetching token from secret ${SECRET_NAME} for service account ${CUSTOM_SA_NAME}"
              SECRET_TOKEN=$(oc get secret ${SECRET_NAME} -n ${CUSTOM_SA_NAMESPACE} --ignore-not-found -o json | jq -r '.data.token' | base64 -d)
              if [[ -z "${SECRET_TOKEN}" ]]; then
                echo "Failed to fetch token"
                exit 1
              fi
              
              # Get cluster API URL to store in sm
              echo "Fetching cluster API URL for cluster ${CLUSTER_ID}"
              CLUSTER_API_URL=$(oc get infrastructure cluster -o jsonpath='{.status.apiServerURL}')
              if [[ -z "${CLUSTER_API_URL}" ]]; then
                echo "Failed to fetch cluster API URL"
                exit 1
              fi

              # aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
              # aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
              # aws configure set default.region $REGION_ID
              # aws configure list
              export SM_AWS_REGION=${REGION_ID}
              sm_login

              # aws secretsmanager create-secret --name ${SECRET_NAME} --secret-string "${SECRET_TOKEN}" --tags "${SECRET_TAGS}"
              SM_SECRET_NAME=${ACCOUNT_ID}/${CLUSTER_ID}/custom-sa/${CUSTOM_SA_NAME}
              TAGS="[{\"Key\": \"source\", \"Value\": \"postsync-custom-sa-update-sm-job\"}, {\"Key\": \"account\", \"Value\": \"${ACCOUNT_ID}\"}, {\"Key\": \"cluster\", \"Value\": \"${CLUSTER_ID}\"}]"
              sm_update_secret ${SM_SECRET_NAME} "{\"cluster\": \"${CLUSTER_ID}\",\"apiurl\":\"${CLUSTER_API_URL}\",\"token\":\"${SECRET_TOKEN}\"}" "${TAGS}"

      restartPolicy: Never
      serviceAccountName: postsync-custom-sa-sa
      volumes:
        - name: aws
          secret:
            secretName: aws
            defaultMode: 420
            optional: false
  backoffLimit: 4
{{- end }}
