{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "cluster-verify" }}

{{- /*
Use the build/bin/set-cli-image-tag.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_tag := "13.2.0" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v2" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_tag
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_tag $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}



---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-verify-job
  namespace: mas-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "01"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cluster-verify-rolebinding-{{ .Values.cluster_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "02"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}

subjects:
  - kind: ServiceAccount
    name: cluster-verify-job
    namespace: mas-syncres
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: mas-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "202"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: "cluster-verify-job"
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: cluster-verify
          image: quay.io/ibmmas/cli:{{ $_cli_image_tag }}
          imagePullPolicy: IfNotPresent
          env:
            - name: ACCOUNT_ID
              value: "{{ .Values.account_id }}"
            - name: REGION_ID
              value: "{{ .Values.region_id }}"
            - name: CLUSTER_ID
              value: "{{ .Values.cluster_id }}"
            - name: VERIFY_CLUSTER
              value: "True"
            - name: VERIFY_CATALOGSOURCES
              value: "True"
            - name: VERIFY_SUBSCRIPTIONS
              value: "True"
            - name: VERIFY_WORKLOADS
              value: "True"
            - name: VERIFY_INGRESS
              value: "False"
            - name: MAS_CATALOG_VERSION
              value: "{{ .Values.mas_catalog_version }}"

          command:
            - /bin/bash
            - -c
            - |

              set -e

              echo
              echo "================================================================================"
              echo "/opt/app-root/src/run-role.sh ocp_verify"
              echo "================================================================================"

              /opt/app-root/src/run-role.sh ocp_verify || exit $?
              
              echo "================================================================================"
              echo "Checking App verification records"
              echo "================================================================================"

              for configmap_namepsace in $(oc get configmap -A -l type=mas-app-verification-record -o jsonpath='{range .items[*]}{@.metadata.name}{":"}{@.metadata.namespace}'); do
                  echo $configmap_namepsace
                  if [[ $configmap_namepsace == ":" ]]; then
                    echo "No configmaps found, exiting"
                    exit 0
                  fi
                  ARR=(${configmap_namepsace//:/ })
                  MAS_APP_CM=${ARR[0]}
                  MAS_APP_NAMESPACE=${ARR[1]}
                  echo "Found verification record $MAS_APP_CM in namespace $MAS_APP_NAMESPACE"
                  MAS_APP=$(oc get configmap -n $MAS_APP_NAMESPACE $MAS_APP_CM -o jsonpath='{.data.mas_app}')
                  echo "Checking verification record for App $MAS_APP"
                  retries=600 # 5 hours retry
                  interval=30
                  index=0

                  while true; do
                      FOUND_CATALOG_VERION=$(oc get configmap -n $MAS_APP_NAMESPACE $MAS_APP_CM -o jsonpath='{.data.mas_catalog_version}')
                      if [[ $FOUND_CATALOG_VERION == $MAS_CATALOG_VERSION ]]; then
                          echo "Found ConfigMap $MAS_APP_CM with correct MAS_CATALOG_VERSION: $MAS_CATALOG_VERSION"

                          TEST_PASSED=$(oc get configmap -n $MAS_APP_NAMESPACE $MAS_APP_CM -o jsonpath='{.data.test_passed}')
                          echo "Found ConfigMap $MAS_APP_CM with TEST_PASSED value of: $TEST_PASSED"
                          if [[ $TEST_PASSED ]]; then
                            SUCCESS=true
                          else
                            SUCCESS=false
                          fi
                      else
                          echo "Found ConfigMap $MAS_APP_CM with incorrect MAS_CATALOG_VERSION of $FOUND_CATALOG_VERION, expecting $MAS_CATALOG_VERSION"
                          SUCCESS=false
                      fi


                      if [[ $SUCCESS == "true" ]]; then
                          break
                      fi

                      if [[ $SUCCESS == "false" ]]; then
                          if [[ ${index} -eq ${retries} ]]; then
                              echo "App Verification record check failed even after $retries retries, exit with error"
                              exit 1
                          fi
                          set +e
                          echo "Verification not completed yet, will retry check..."
                          sleep $interval
                          ((index++))
                          set -e
                      fi
                  done
              done

              echo "Finished checking App verification records"

      restartPolicy: Never
      serviceAccountName: cluster-verify-job
  backoffLimit: 4