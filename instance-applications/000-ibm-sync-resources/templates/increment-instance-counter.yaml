---
apiVersion: batch/v1
kind: Job
metadata:
  name: increment-instance-counter-{{ .Values.instance_id }}
  namespace: {{ .Values.argo.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "999"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: argocd-server
      containers:
      - name: increment-counter
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          # Get the current values.yaml content
          VALUES_FILE="root-applications/ibm-mas-cluster-root/values.yaml"

          # Clone the GitOps repository
          echo "Cloning repository {{ .Values.source.repo_url }} and checking out branch {{ .Values.source.revision }}"
          git clone {{ .Values.source.repo_url }} /tmp/gitops
          cd /tmp/gitops
          git checkout {{ .Values.source.revision }}
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la

          # Get the current number_of_instances value
          echo "Checking for number_of_instances in $VALUES_FILE"
          grep "number_of_instances:" $VALUES_FILE || echo "number_of_instances not found in file"
          CURRENT_COUNT=$(grep -A 1 "number_of_instances:" $VALUES_FILE | tail -1 | awk '{print $1}' || echo "0")
          echo "Current count: $CURRENT_COUNT"

          # Check if this instance is already counted
          # We'll create a marker file in the config repo for each instance
          INSTANCE_MARKER_DIR="instances/markers"
          INSTANCE_MARKER_FILE="$INSTANCE_MARKER_DIR/{{ .Values.instance_id }}.marker"

          # Create the markers directory if it doesn't exist
          mkdir -p $INSTANCE_MARKER_DIR

          # Check if the marker file exists
          if [ ! -f "$INSTANCE_MARKER_FILE" ]; then
            echo "This appears to be a new instance ({{ .Values.instance_id }}). Incrementing counter."

            # Increment the counter
            NEW_COUNT=$((CURRENT_COUNT + 1))

            # Update the values file
            echo "Updating number_of_instances from $CURRENT_COUNT to $NEW_COUNT"
            if grep -q "number_of_instances:" $VALUES_FILE; then
              # If the field exists, update it
              sed -i "s/number_of_instances: $CURRENT_COUNT/number_of_instances: $NEW_COUNT/" $VALUES_FILE
            else
              # If the field doesn't exist, add it to the cluster section
              echo "Field not found, adding it to cluster section"
              sed -i "/cluster:/a\\  number_of_instances: $NEW_COUNT" $VALUES_FILE
            fi
            
            # Verify the update
            echo "After update:"
            grep "number_of_instances:" $VALUES_FILE || echo "Still not found after update!"

            # Create the marker file
            echo "Instance {{ .Values.instance_id }} provisioned on $(date)" > $INSTANCE_MARKER_FILE

            # Configure Git
            echo "Configuring Git"
            git config --global user.email "gitops-automation@example.com"
            git config --global user.name "GitOps Automation"
            
            # Commit and push the changes
            echo "Adding files to git"
            git add $VALUES_FILE $INSTANCE_MARKER_FILE
            git status
            
            echo "Committing changes"
            git commit -m "Increment instance counter to $NEW_COUNT for new instance {{ .Values.instance_id }}"
            
            echo "Pushing changes to {{ .Values.source.revision }}"
            # Try to push with error handling
            if ! git push origin {{ .Values.source.revision }}; then
              echo "Push failed. This could be due to authentication issues or conflicts."
              echo "Trying to pull latest changes and retry..."
              git pull --rebase origin {{ .Values.source.revision }}
              if ! git push origin {{ .Values.source.revision }}; then
                echo "Push still failed after rebase. Check repository permissions and authentication."
                exit 1
              fi
            fi

            echo "Counter incremented from $CURRENT_COUNT to $NEW_COUNT"
          else
            echo "Instance {{ .Values.instance_id }} already counted. No action needed."
          fi
      restartPolicy: Never
  backoffLimit: 3

