{{- if not .Values.disable_doc_db_add_user_job }}

{{- if not (empty .Values.docdb) }}

{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "aws-docdb-add-user" }}

{{- /*
Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:e9384807ec36898ac30e219991b220bdc3fb726bb7c0e1383ef54da4df670e6d" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v3" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}

{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}


---

# Username of generated user will always be "masinst_${MAS_INSTANCE_ID}"
# Password will be set to whatever is in the acc/cluster/instance/mongo#password secret at time of sync, or generated if the secret is not set
# adler32sum of docdb config is included in job name; this means it will be rerun whenever docdb config changes
# The job is idempotent in cases there the config change is inconsequential (e.g. a cert alias is changed).
# If the config is modified to point to a different docdb instance, the user created in the previous DocDB will not be cleaned up
# The v1 in the name allows use to change this if there is a modification needed that is not in the yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: mas-{{ .Values.instance_id }}-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "00"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: "sync-job"
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: aws-docdb-process-user
          image: "{{ .Values.cli_image_repo }}@{{ $_cli_image_digest }}"
          imagePullPolicy: IfNotPresent
          env:

            - name: ACCOUNT_ID
              value: "{{ .Values.account_id }}"
            - name: CLUSTER_ID
              value: "{{ .Values.cluster_id }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"

            - name: DOCDB_MASTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_username
            - name: DOCDB_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_password
            - name: DOCDB_INSTANCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_instance_password
                  optional: true
            - name: DOCDB_MASTER_INFO
              valueFrom:
                secretKeyRef:
                  name: aws-docdb
                  key: docdb_master_info
            - name: SM_AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_default_region
            - name: SM_AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_access_key_id
            - name: SM_AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws
                  key: aws_secret_access_key

          command:
            - /bin/sh
            - -c
            - |

              set -e


              echo
              echo "================================================================================"
              echo "/opt/app-root/src/run-role.sh aws_documentdb_user"
              echo "================================================================================"

              export MAS_CONFIG_DIR="/tmp/${MAS_INSTANCE_ID}/aws_documentdb_user"
              OUTPUT_FILE=${MAS_CONFIG_DIR}/docdb-${MAS_INSTANCE_ID}-instance-credentials.yml
              export USER_ACTION="add"

              DOCDB_HOST_COUNT=$(echo "${DOCDB_MASTER_INFO}" | sed 's/\\n/\n/g' | sed 's/\\"//g' | yq '.config.hosts  | length')
              while [ ${DOCDB_HOST_COUNT} -gt 0 ]; do
                DOCDB_HOST_COUNT=$((DOCDB_HOST_COUNT-1))
                # Grab hosts/ports from docdb master info
                DOCDB_HOST=$(echo "${DOCDB_MASTER_INFO}" | sed 's/\\n/\n/g' | sed 's/\\"//g' | yq ".config.hosts[$DOCDB_HOST_COUNT].host")
                DOCDB_PORT=$(echo "${DOCDB_MASTER_INFO}" | sed 's/\\n/\n/g' | yq ".config.hosts[$DOCDB_HOST_COUNT].port")
                DOCDB_HOSTS="$DOCDB_HOSTS$DOCDB_HOST:$DOCDB_PORT,"
              done
              # remove trailing comma
              export DOCDB_HOSTS=${DOCDB_HOSTS%,}

              echo "Params:"
              echo "    - MAS_INSTANCE_ID         ................... ${MAS_INSTANCE_ID}"
              echo "    - MAS_CONFIG_DIR          ................... ${MAS_CONFIG_DIR}"
              echo "    - DOCDB_HOST              ................... ${DOCDB_HOST}"
              echo "    - DOCDB_PORT              ................... ${DOCDB_PORT}"
              echo "    - DOCDB_HOSTS             ................... ${DOCDB_HOSTS}"
              echo "    - DOCDB_MASTER_USERNAME   ................... ${DOCDB_MASTER_USERNAME:0:2}<snip>"
              echo "    - DOCDB_MASTER_PASSWORD   ................... ${DOCDB_MASTER_PASSWORD:0:2}<snip>"
              echo "    - DOCDB_INSTANCE_PASSWORD ................... ${DOCDB_INSTANCE_PASSWORD:0:2}<snip>"
              echo "    - USER_ACTION             ................... ${USER_ACTION}"
              echo "    - OUTPUT_FILE             ................... ${OUTPUT_FILE}"
              echo

              mkdir -p ${MAS_CONFIG_DIR}
              /opt/app-root/src/run-role.sh aws_documentdb_user || exit $?

              # The role should have created a file ${OUTPUT_FILE} containing the username/password it applied
              # Read these so we can set the values in the instance's mongo secret in AWS SM
              DOCDB_INSTANCE_USERNAME=$(yq '.data.docdb_username' $OUTPUT_FILE | base64 -d)
              DOCDB_INSTANCE_PASSWORD=$(yq '.data.docdb_password' $OUTPUT_FILE | base64 -d)
              
              
              echo 
              echo "================================================================================"
              echo "Updating Instance Mongo Secret"
              echo "================================================================================"

              SECRETS_KEY_SEPERATOR="/"
              SECRET_NAME_MONGO=${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}${MAS_INSTANCE_ID}${SECRETS_KEY_SEPERATOR}mongo
              DOCDB_MASTER_INFO_ESCAPED=${DOCDB_MASTER_INFO//\"/\\\"}
              DOCDB_MASTER_INFO_ESCAPED=${DOCDB_MASTER_INFO_ESCAPED//$'\n'/\\n}

              echo "Params:"
              echo "    - ACCOUNT_ID                 ................... ${ACCOUNT_ID}"
              echo "    - CLUSTER_ID                 ................... ${CLUSTER_ID}"
              echo "    - MAS_INSTANCE_ID            ................... ${MAS_INSTANCE_ID}"
              echo "    - SECRET_NAME_MONGO          ................... ${SECRET_NAME_MONGO}"
              echo "    - SM_AWS_REGION              ................... ${SM_AWS_REGION}"
              echo "    - SM_AWS_ACCESS_KEY_ID       ................... ${SM_AWS_ACCESS_KEY_ID:0:2}<snip>"
              echo "    - SM_AWS_SECRET_ACCESS_KEY   ................... ${SM_AWS_SECRET_ACCESS_KEY:0:2}<snip>"
              echo "    - DOCDB_INSTANCE_USERNAME    ................... ${DOCDB_INSTANCE_USERNAME:0:2}<snip>"
              echo "    - DOCDB_INSTANCE_PASSWORD    ................... ${DOCDB_INSTANCE_PASSWORD:0:2}<snip>"
              echo "    - DOCDB_MASTER_INFO_ESCAPED  ................... ${DOCDB_MASTER_INFO_ESCAPED}"
              echo


              source /mascli/functions/gitops_utils
              sm_login
              TAGS="[{\"Key\": \"source\", \"Value\": \"aws-docdb-add-user\"}, {\"Key\": \"account\", \"Value\": \"${ACCOUNT_ID}\"}, {\"Key\": \"cluster\", \"Value\": \"${CLUSTER_ID}\"}]"
              sm_update_secret $SECRET_NAME_MONGO "{\"info\":\"$DOCDB_MASTER_INFO_ESCAPED\", \"username\":\"$DOCDB_INSTANCE_USERNAME\", \"password\":\"$DOCDB_INSTANCE_PASSWORD\"}" "${TAGS}" || exit $?

      restartPolicy: Never
      serviceAccountName: aws-docdb-user-job
  backoffLimit: 4
{{- end }}
{{- end }}
