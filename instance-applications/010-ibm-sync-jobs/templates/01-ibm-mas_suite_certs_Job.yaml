{{- if and (eq .Values.dns_provider "cis") (.Values.mas_manual_cert_mgmt) }}
{{- if not (empty .Values.manual_certs) }}

{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "ibm-suite-certs" }}

{{- /*
Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:1b88f88a1a719d006ea1f4b8dcfd1c2625fa7ecc529c3267e7b4b6afaa1c8da0" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v2" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}

{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: mas-{{ .Values.instance_id }}-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "003"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: "sync-job"
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: suite-certs-role-run
          image: {{ .Values.cli_image_repo | default "quay.io/ibmmas/cli" }}@{{ $_cli_image_digest }}
          imagePullPolicy: IfNotPresent

          env:
            - name: ACCOUNT_ID
              value: "{{ .Values.account_id }}"
            - name: CLUSTER_ID
              value: "{{ .Values.cluster_id }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"

            # dns
            - name: DNS_PROVIDER
              value: "{{ .Values.dns_provider }}"
            - name: MAS_MANUAL_CERT_MGMT
              value: "{{ .Values.mas_manual_cert_mgmt }}"

            - name: MAS_WORKSPACE_ID
              value: "{{ .Values.mas_workspace_id }}"
            - name: MAS_CONFIG_DIR
              value: "{{ .Values.mas_config_dir }}"
            - name: CIS_CRN
              value: "{{ .Values.cis_crn }}"
            - name: CIS_SUBDOMAIN
              value: "{{ .Values.cis_subdomain }}"
            - name: CIS_PROXY
              value: "{{ .Values.cis_proxy }}"

            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"

          volumeMounts:
            - name: "ibm-suite-certs"
              mountPath: /etc/mas/creds/suite_certs
          command:
            - /bin/sh
            - -c
            - |

              set -e
              export MAS_CONFIG_DIR=${MAS_CONFIG_DIR:-"/tmp/suite_certs/configs"}

              export CIS_APIKEY=$(cat /etc/mas/creds/suite_certs/cis_apikey)
              MAS_MANUAL_CERTS_YAML=/etc/mas/creds/suite_certs/manual_certs.yaml

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "DNS Provider ........................ ${COLOR_MAGENTA}${DNS_PROVIDER}"
              echo "Manual Cert Mgmt Flag ............... ${COLOR_MAGENTA}${MAS_MANUAL_CERT_MGMT}"
              echo "MAS Instance Id ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
              echo "MAS Workspace ID .................... ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
              echo "MAS CONFIG DIR ...................... ${COLOR_MAGENTA}${MAS_CONFIG_DIR}"
              echo "CIS CRN ............................. ${COLOR_MAGENTA}${CIS_CRN}"
              echo "IBM CLOUD APIKEY .................... ${COLOR_MAGENTA}${CIS_APIKEY:0:4}<snip>"
              echo "CIS subdomain ....................... ${COLOR_MAGENTA}${CIS_SUBDOMAIN}"
              echo "CIS proxy ........................... ${COLOR_MAGENTA}${CIS_PROXY}"

              echo "MAS Manual Certs YAML location ...... ${COLOR_MAGENTA}${MAS_MANUAL_CERTS_YAML}"

              echo ""
              echo "================================================================================"

              #create files as suite_cert role requires in MAS_CONFIG_DIR folder
              appList=(
                "core"
                "assist" 
                "iot"
                "manage"
                "monitor"
                "optimizer"  
                "predict"
                "visualinspection"
                "facilities"
              )

              if [[ -n "$MAS_MANUAL_CERTS_YAML" ]] && [[ -s "$MAS_MANUAL_CERTS_YAML" ]]; then

                for app in ${appList[@]}; do

                  echo "Copying certs for $app into ${MAS_CONFIG_DIR}/certs/$app/ "
                  mkdir -p ${MAS_CONFIG_DIR}/certs/$app

                  tls_crt_filter_query=.manual_certs.${app}_tls_crt
                  tls_key_filter_query=.manual_certs.${app}_tls_key
                  ca_crt_filter_query=.manual_certs.${app}_ca_crt

                  yq eval "$tls_crt_filter_query // \"\"" ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/tls.crt
                  yq eval "$tls_key_filter_query // \"\"" ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/tls.key
                  yq eval "$ca_crt_filter_query // \"\""  ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/ca.crt

                  echo "Done"
                done  
              fi
              if [[ "${MAS_MANUAL_CERT_MGMT}" == 'true' ]]; then
                export MAS_MANUAL_CERT_MGMT=True
              else
                export MAS_MANUAL_CERT_MGMT=False
              fi
              # Ref - https://github.com/ibm-mas/ansible-devops/blob/master/ibm/mas_devops/roles/suite_certs/README.md
              # Set GITOPS flag so that suite_certs roles doesn't create the certificate resources but does do the dns management
              export GITOPS=True
              export ROLE_NAME=suite_certs
              ansible-playbook ibm.mas_devops.run_role
              rc=$?
              echo "Role suite_certs completes with rc=${rc}"
              [ $rc -ne 0 ] && exit $rc

              exit 0

      restartPolicy: Never

      serviceAccountName: ibm-suite-certs-job
      volumes:
        - name: "ibm-suite-certs"
          secret:
            secretName: "ibm-suite-certs"
            defaultMode: 420
            optional: false

  backoffLimit: 4

{{- end }}
{{- end }}
