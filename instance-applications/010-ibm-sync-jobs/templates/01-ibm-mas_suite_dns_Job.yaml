{{- if and (eq .Values.dns_provider "cis") (not .Values.mas_manual_cert_mgmt) }}

{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "ibm-suite-dns" }}

{{- /*
Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:b3ecce096368c967bbc6bac2f074473a65418462417b6e550ad4777427c3b06b" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v3" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}

{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: mas-{{ .Values.instance_id }}-syncres
  annotations:
    argocd.argoproj.io/sync-wave: "003"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: "sync-job"
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: suite-dns-role-run
          image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
          imagePullPolicy: IfNotPresent

          env:
            - name: ACCOUNT_ID
              value: "{{ .Values.account_id }}"
            - name: CLUSTER_ID
              value: "{{ .Values.cluster_id }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"

            - name: SECRETS_KEY_SEPERATOR
              value: "/"

            # dns
            - name: DNS_PROVIDER
              value: "{{ .Values.dns_provider }}"
            - name: MAS_MANUAL_CERT_MGMT
              value: "{{ .Values.mas_manual_cert_mgmt }}"

            - name: MAS_WORKSPACE_ID
              value: "{{ .Values.mas_workspace_id }}"
            - name: MAS_DOMAIN
              value: "{{ .Values.mas_domain }}"
            - name: MAS_CONFIG_DIR
              value: "{{ .Values.mas_config_dir }}"

            - name: CIS_EMAIL
              value: "{{ .Values.cis_email }}"
            - name: CIS_CRN
              value: "{{ .Values.cis_crn }}"
            - name: CIS_SUBDOMAIN
              value: "{{ .Values.cis_subdomain }}"
            - name: CIS_MAS_DOMAIN
              value: "{{ .Values.cis_mas_domain }}"

            - name: OCP_CLUSTER_DOMAIN
              value: "{{ .Values.ocp_cluster_domain }}"
            - name: CIS_ENHANCED_SECURITY
              value: "{{ .Values.cis_enhanced_security }}"
            - name: CIS_WAF
              value: "{{ .Values.cis_waf }}"
            - name: CIS_PROXY
              value: "{{ .Values.cis_proxy }}"
            - name: CIS_SERVICE_NAME
              value: "{{ .Values.cis_service_name }}"

            - name: UPDATE_DNS_ENTRIES
              value: "{{ .Values.update_dns_entries }}"
            - name: DELETE_WILDCARDS
              value: "{{ .Values.delete_wildcards }}"
            - name: OVERRIDE_EDGE_CERTS
              value: "{{ .Values.override_edge_certs }}"
            - name: CIS_ENTRIES_TO_ADD
              value: "{{ .Values.cis_entries_to_add }}"

            - name: SM_AWS_REGION
              value: "{{ .Values.sm_aws_region }}"

            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"

          volumeMounts:
            - name: "ibm-suite-dns"
              mountPath: /etc/mas/creds/suite_dns
          command:
            - /bin/sh
            - -c
            - |

              set -e



              export CIS_APIKEY=$(cat /etc/mas/creds/suite_dns/cis_apikey)
              export SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/suite_dns/sm_aws_access_key_id)
              export SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/suite_dns/sm_aws_secret_access_key)
              source /mascli/functions/gitops_utils
              sm_login

              #if DNS name is set in AWS SM path account/cluster/public-elb (key=dns), set its value to OCP_INGRESS
              export PUBLIC_ELB_DNS_NAME_FILE="/tmp/public-elb-dns-name-file.json"
              sm_get_secret_file ${ACCOUNT_ID}${SECRETS_KEY_SEPERATOR}${CLUSTER_ID}${SECRETS_KEY_SEPERATOR}public-elb ${PUBLIC_ELB_DNS_NAME_FILE}
              export OCP_INGRESS=$(jq -r .dns $PUBLIC_ELB_DNS_NAME_FILE)

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "DNS Provider ........................ ${COLOR_MAGENTA}${DNS_PROVIDER}"
              echo "Manual Cert Mgmt Flag ............... ${COLOR_MAGENTA}${MAS_MANUAL_CERT_MGMT}"
              echo "Account Id .......................... ${COLOR_MAGENTA}${ACCOUNT_ID}"
              echo "Cluster Id .......................... ${COLOR_MAGENTA}${CLUSTER_ID}"
              echo "MAS Instance Id ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
              echo "MAS Workspace ID .................... ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
              echo "MAS CONFIG DIR ...................... ${COLOR_MAGENTA}${MAS_CONFIG_DIR}"
              echo "CIS Email ........................... ${COLOR_MAGENTA}${CIS_EMAIL}"
              echo "CIS CRN ............................. ${COLOR_MAGENTA}${CIS_CRN}"
              echo "IBM CLOUD APIKEY .................... ${COLOR_MAGENTA}${CIS_APIKEY:0:4}<snip>"
              echo "MAS Domain .......................... ${COLOR_MAGENTA}${MAS_DOMAIN}"
              echo "CIS MAS Domain ...................... ${COLOR_MAGENTA}${CIS_MAS_DOMAIN}"
              echo "OCP Cluster Domain .................. ${COLOR_MAGENTA}${OCP_CLUSTER_DOMAIN}"
              echo "CIS subdomain ....................... ${COLOR_MAGENTA}${CIS_SUBDOMAIN}"
              echo "CIS enhanced security Flag........... ${COLOR_MAGENTA}${CIS_ENHANCED_SECURITY}"
              echo "CIS WAF ............................. ${COLOR_MAGENTA}${CIS_WAF}"
              echo "CIS proxy ........................... ${COLOR_MAGENTA}${CIS_PROXY}"
              echo "CIS service name .................... ${COLOR_MAGENTA}${CIS_SERVICE_NAME}"
              echo "update DNS entries Flag ............. ${COLOR_MAGENTA}${UPDATE_DNS_ENTRIES}"
              echo "DELETE_WILDCARDS Flag ............... ${COLOR_MAGENTA}${DELETE_WILDCARDS}"
              echo "OVERRIDE_EDGE_CERTS Flag ............ ${COLOR_MAGENTA}${OVERRIDE_EDGE_CERTS}"
              echo "CIS_ENTRIES_TO_ADD  ................. ${COLOR_MAGENTA}${CIS_ENTRIES_TO_ADD}"

              echo "OCP_INGRESS  ........................ ${COLOR_MAGENTA}${OCP_INGRESS}"
              echo "SM_AWS_REGION ....................... ${COLOR_MAGENTA}${SM_AWS_REGION}"
              echo "SM_AWS_ACCESS_KEY_ID ................ ${COLOR_MAGENTA}${SM_AWS_ACCESS_KEY_ID:0:4}<snip>"
              echo "SM_AWS_SECRET_ACCESS_KEY ............ ${COLOR_MAGENTA}${SM_AWS_SECRET_ACCESS_KEY:0:4}<snip>"

              echo ""
              echo "================================================================================"
              export MAS_DOMAIN=$CIS_MAS_DOMAIN
              mkdir -p ${MAS_CONFIG_DIR}

              if [[ "${MAS_MANUAL_CERT_MGMT}" == 'true' ]]; then
                export MAS_MANUAL_CERT_MGMT=True
              else
                export MAS_MANUAL_CERT_MGMT=False
              fi

              # Ref - https://github.com/ibm-mas/ansible-devops/blob/master/ibm/mas_devops/roles/suite_dns/README.md
              export ROLE_NAME=suite_dns
              ansible-playbook ibm.mas_devops.run_role
              rc=$?
              echo "suite_dns rc=${rc}"
              [ $rc -ne 0 ] && exit $rc
              exit 0

      restartPolicy: Never

      serviceAccountName: ibm-suite-dns-job
      volumes:
        - name: "ibm-suite-dns"
          secret:
            secretName: "ibm-suite-dns"
            defaultMode: 420
            optional: false

  backoffLimit: 4

{{- end }}