---
apiVersion: batch/v1
kind: Job
metadata:
  name: "cpd-wsl-post-verify-job-part-a"
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "096"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:9.0.0-pre.gitops
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: CPD_INSTANCE_NAMESPACE
              value: {{ .Values.cpd_instance_namespace }}
            - name: CPD_OPERATORS_NAMESPACE
              value: {{ .Values.cpd_operators_namespace }}
            - name: CPD_SERVICE_STORAGE_CLASS
              value: {{ .Values.cpd_service_storage_class }}
            - name: CPD_SERVICE_BLOCK_STORAGE_CLASS
              value: {{ .Values.cpd_service_block_storage_class }}
          command:
            - /bin/sh
            - -c
            - |

              set -e
              echo
              echo "================================================================================"
              echo "Part A - Waiting for WSL and its dependencies to be complete"
              echo "Wait for CCS Cr to be ready and patch if needed"
              echo "================================================================================"
              echo
              
              echo
              echo "Waiting for ccs-cr to be ready..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1800 ]; then
                  echo "ccs-cr is not ready after 30 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                CCS_CR_LOOKUP=$(oc get CCS ccs-cr -n $CPD_INSTANCE_NAMESPACE --ignore-not-found)
                if [[ ! -z $CCS_CR_LOOKUP ]]; then
                  echo "CCS Cr is available"
                  break
                fi
              done

              echo "Patching CCS ccs-cr if not already patched"
              CCS_COUCHDB_RES=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.couchdb_resources}')
              CCS_BLOCKSTORAGE=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.blockStorageClass}')
              CCS_IMAGEPULLSECRET=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.imagePullSecret}')

              if [[ -z $CCS_COUCHDB_RES || -z $CCS_BLOCKSTORAGE || -z $CCS_IMAGEPULLSECRET ]]; then
                echo "CCS CR needs to be patched"
                echo "patching CCS Cr..."
                oc patch --type='merge' CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -p "{\"spec\":{ \"imagePullSecret\":\"ibm-entitlement-key\",\"blockStorageClass\":\"$CPD_SERVICE_BLOCK_STORAGE_CLASS\",\"fileStorageClass\":\"$CPD_SERVICE_STORAGE_CLASS\",\"couchdb_resources\":{ \"limits\":{ \"cpu\":\"16\",\"memory\":\"16Gi\"},\"requests\":{ \"cpu\":\"3\",\"memory\":\"256Mi\"},\"couchdb_search_resources\":{ \"limits\":{ \"cpu\":\"4\",\"memory\":\"6Gi\"},\"requests\":{ \"cpu\":\"250m\",\"memory\":\"256Mi\"}}}}}"
                echo "scaling CCS operator down and up to force reconcile when the pod is restarted"
                oc scale deployment ibm-cpd-ccs-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=0
                oc scale deployment ibm-cpd-ccs-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=1
              fi

              echo
              echo "Waiting for ibm-cpd-ccs-operator to be ready again..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1200 ]; then
                  echo "CCS operator is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                CCS_OPERATOR_LOOKUP=$(oc get deployment ibm-cpd-ccs-operator -n $CPD_OPERATORS_NAMESPACE --ignore-not-found -ojsonpath='{.status.availableReplicas}')
                if [[ ! -z $CCS_OPERATOR_LOOKUP ]]; then
                  echo "CCS Operator is ready again"
                  break
                fi
              done

              echo
              echo "================================================================================"
              echo "Wait for Elastic Search to be ready and patch if needed before checking ccsStatus"
              echo "================================================================================"
              echo

              echo
              echo "Waiting for elasticsearch-master to be ready..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1800 ]; then
                  echo "elasticsearch-master is not ready after 30 minutes of waiting. Exiting..."
                  exit 1
                else
                  sleep 60
                fi

                ELASTICSEARCH_CR_LOOKUP=$(oc get ElasticsearchCluster elasticsearch-master -n $CPD_INSTANCE_NAMESPACE --ignore-not-found)
                if [[ ! -z $ELASTICSEARCH_CR_LOOKUP ]]; then
                  echo "Elasticsearch Cr is available"
                  break
                fi
              done

              echo "Patching ElasticsearchCluster elasticsearch-master if not already patched"
             
              ELASTICSEARCH_IMAGEPULLSECRET=$(oc get ElasticsearchCluster elasticsearch-master -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.imagePullSecret}')

              if [[ -z $ELASTICSEARCH_IMAGEPULLSECRET ]]; then
                echo "elasticsearch-master needs to be patched"
                echo "patching elasticsearch-master and forcing reconcile..."
                oc scale deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n ${CPD_OPERATORS_NAMESPACE} --replicas=0
                oc delete Job elasticsearch-master-ibm-elasticsearch-create-snapshot-repo-job -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found
                oc delete StatefulSet -n ${CPD_INSTANCE_NAMESPACE} --selector="app.kubernetes.io/instance=elasticsearch-master" --ignore-not-found
                oc patch --type='merge' ElasticsearchCluster elasticsearch-master -n ${CPD_INSTANCE_NAMESPACE} -p "{\"spec\":{ \"imagePullSecret\":\"ibm-entitlement-key\"}}"
                oc scale deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n ${CPD_OPERATORS_NAMESPACE} --replicas=1
              fi

              echo
              echo "Waiting for ibm-elasticsearch-operator to be ready again..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1200 ]; then
                  echo "Elasticsearch operator is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                ELASTICSEARCH_OPERATOR_LOOKUP=$(oc get deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n $CPD_OPERATORS_NAMESPACE --ignore-not-found -ojsonpath='{.status.availableReplicas}')
                if [[ ! -z $ELASTICSEARCH_OPERATOR_LOOKUP ]]; then
                  echo "Elasticsearch Operator is ready again"
                  break
                fi
              done

              echo
              echo "================================================================================"
              echo "Back to CCS"
              echo "================================================================================"
              echo
              echo "Waiting for ccsStatus to be 'Completed'..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+300))
                if [ $wait_period -gt 15000 ]; then
                  echo "ccsStatus is not complete after 4 hours and 10 minutes of waiting. Exiting..."
                  exit 1
                else
                  sleep 300
                fi

                CCSSTATUS_LOOKUP=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -o jsonpath='{.status.ccsStatus}')
                if [[ ! -z ${CCSSTATUS_LOOKUP} && ${CCSSTATUS_LOOKUP} == *"Completed"* ]]; then
                  echo "CCS is complete"
                  break
                fi
              done


              echo
              echo "================================================================================"
              echo "Wait for WSL to be ready and patch if needed"
              echo "================================================================================"
              echo

              echo "Waiting for notebookruntimes.ws.cpd.ibm.com CRD to be available..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+5))
                if [ $wait_period -gt 600 ]; then
                  echo "notebookruntimes.ws.cpd.ibm.com CRD is not avalable after 10 minutes of waiting. Exiting..."
                  exit 1
                else
                  sleep 5
                fi

                WSR_LOOKUP=$(oc get CustomResourceDefinition notebookruntimes.ws.cpd.ibm.com --ignore-not-found)
                if [[ ! -z ${WSR_LOOKUP} ]]; then
                  echo "notebookruntimes.ws.cpd.ibm.com is available"
                  break
                fi
              done

              echo
              echo "================================================================================"
              echo "to be continued in job part B..."
              echo              

      restartPolicy: Never
      serviceAccountName: wsl-precheck-sa
  backoffLimit: 4


---
apiVersion: ws.cpd.ibm.com/v1beta1
kind: NotebookRuntime
metadata:
  name: "ibm-cpd-ws-runtime-py39"
  namespace: "{{ .Values.cpd_instance_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "097"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  kind: "ibm-cpd-ws-runtime-py39"
  license:
    accept: true
  version: "{{ .Values.ws_runtimes_version }}"

---
kind: Secret
apiVersion: v1
metadata:
  name: aws
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "097"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
stringData:
  aws_access_key_id: {{ .Values.sm_aws_access_key_id }}
  aws_secret_access_key: {{ .Values.sm_aws_secret_access_key }}
type: Opaque



---
apiVersion: batch/v1
kind: Job
metadata:
  name: "cpd-wsl-post-verify-job-part-b"
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "098"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:9.0.0-pre.gitops
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: CPD_INSTANCE_NAMESPACE
              value: {{ .Values.cpd_instance_namespace }}
            - name: ACCOUNT_ID
              value: {{ .Values.account_id }}
            - name: REGION_ID
              value: {{ .Values.region_id }}
            - name: CLUSTER_ID
              value: {{ .Values.cluster_id }}
            - name: INSTANCE_ID
              value: {{ .Values.instance_id }}
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
          volumeMounts:
            - name: aws
              mountPath: /etc/mas/creds/aws
          command:
            - /bin/sh
            - -c
            - |

              set -e
              echo 
              echo "================================================================================"
              echo "Part B - Waiting for WSL and its dependencies to be complete"
              echo "Wait for WS Status to be Completed"
              echo "================================================================================"
              echo 
              
              echo "Waiting for wsStatus to be 'Completed'..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+300))
                if [ $wait_period -gt 9000 ]; then
                  echo "wsStatus is not complete after 2 hours and 30 minutes of waiting."
                  echo "Watson Studio install failed (wsStatus). Exiting..."
                  exit 1
                else
                  sleep 300
                fi

                WSSTATUS_LOOKUP=$(oc get WS ws-cr -n ${CPD_INSTANCE_NAMESPACE} -o jsonpath='{.status.wsStatus}')
                if [[ ! -z ${WSSTATUS_LOOKUP} && ${WSSTATUS_LOOKUP} == *"Completed"* ]]; then
                  echo "Watson Studio is complete"
                  break
                fi
              done


              echo 
              echo "================================================================================"
              echo "Lookup Cloud Pak for Data admin username"
              USERNAME=$(oc get secret ibm-iam-bindinfo-platform-auth-idp-credentials -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -o json | jq -r '.data.admin_username' | base64 -d)

              if [[ -z ${USERNAME} ]]; then
                export CPD_ADMIN_USERNAME="admin"
                export SECRET_NAME="admin-user-details"
                export ADMIN_PASSWORD_PROPERTY="initial_admin_password"

              else
                export CPD_ADMIN_USERNAME="cpadmin"
                export SECRET_NAME="ibm-iam-bindinfo-platform-auth-idp-credentials"
                export ADMIN_PASSWORD_PROPERTY="admin_password"
              fi
              
              
              echo 
              echo "Lookup Cloud Pak for Data admin password"
              CPD_ADMIN_PASSWORD=$(oc get secret $SECRET_NAME -n ${CPD_INSTANCE_NAMESPACE} -o json | jq -r ".data.${ADMIN_PASSWORD_PROPERTY}" | base64 -d)

              echo 
              echo "Lookup Cloud Pak for Data admin url"
              URL=$(oc get ZenService lite-cr -o jsonpath="{.status.url}{'\n'}" -n ${CPD_INSTANCE_NAMESPACE})

              if [[ -z ${URL} || -z ${CPD_ADMIN_USERNAME} || -z ${CPD_ADMIN_PASSWORD} ]]; then
                echo "CPD admin username/password/url details are missing, please check your Cloud Pak For Data instance health!"
                exit 1
              fi

              CPD_ADMIN_URL="https://${URL}"

              echo 
              echo "================================================================================"
              echo "Debug Cloud Pak for Data Admin details"
              echo "================================================================================"
              echo "- CP4D Dashboard ......................... ${CPD_ADMIN_URL}"
              echo "- CP4D Admin Username .................... ${CPD_ADMIN_USERNAME}"
              echo "- CP4D Admin Password .................... ${CPD_ADMIN_PASSWORD:0:2}<snip>"

              CPD_WSL_PROJECT_NAME=wsl-mas-${INSTANCE_ID}-predict
              echo 
              echo "================================================================================"
              echo "Generate MAS Config for WSL in $MAS_CONFIG_DIR folder"
              echo "================================================================================"
              echo "- CP4D WSL Project Name .................. ${CPD_WSL_PROJECT_NAME}"
              echo 

              echo "Authorize CP4D Admin and get bearer token"
              echo "================================================================================"
              CPD_BEARER_TOKEN=$(curl -k -X POST --location "${CPD_ADMIN_URL}/icp4d-api/v1/authorize" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"username\":\"$CPD_ADMIN_USERNAME\",\"password\":\"$CPD_ADMIN_PASSWORD\"}" | jq -r '.token')

              echo "Check if a project with the name ${CPD_WSL_PROJECT_NAME} exists"
              echo "================================================================================"
              curl -k -X GET --location "${CPD_ADMIN_URL}/v2/projects" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" -o projectlist.json
              WSL_PROJECT_ID=$(cat projectlist.json | jq -r --arg pn "$CPD_WSL_PROJECT_NAME" '.resources[] | select(.entity.name==$pn) | .metadata.guid')
              

              if [[ -z ${WSL_PROJECT_ID} ]]; then
                CPD_WSL_PROJECT_DESCRIPTION="Watson Studio Project for Maximo Application Suite"
                CPD_WSL_PROJECT_STORAGE_GUID=$(uuidgen -r)
                echo "Project ${CPD_WSL_PROJECT_NAME} does not exist in the project list. A new project will be created."
                echo "================================================================================"
                echo "- Project Name ......................... ${CPD_WSL_PROJECT_NAME}"
                echo "- Project Description .................. ${CPD_WSL_PROJECT_DESCRIPTION}"
                echo "- Project Storage Guid ................. ${CPD_WSL_PROJECT_STORAGE_GUID}"
                
                echo "Check that the cpd admin user has permission to create projects"
                echo "================================================================================"
                curl -k -X PUT --location "${CPD_ADMIN_URL}/usermgmt/v1/role/zen_administrator_role" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"role_name\":\"Administrator\",\"description\":\"Administrator role\",\"permissions\":[\"administrator\",\"can_provision\",\"manage_catalog\",\"create_space\",\"create_project\"]}"

                echo "Creating a new project..."
                WSL_PROJECT_ID=$(curl -k -X POST --location "${CPD_ADMIN_URL}/transactional/v2/projects" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"name\":\"$CPD_WSL_PROJECT_NAME\",\"description\":\"$CPD_WSL_PROJECT_DESCRIPTION\",\"generator\":\"cp4d-$CPD_ADMIN_USERNAME\",\"public\":false,\"storage\":{ \"type\":\"assetfiles\",\"guid\":\"$CPD_WSL_PROJECT_STORAGE_GUID\"}}" | jq -r '.location | split ("/") | last')
              else
                echo "Project named ${CPD_WSL_PROJECT_NAME} already exists and has been found"
              fi

              echo "- WSL Project Id ............................. ${WSL_PROJECT_ID}"
              echo "Writing WSL Project ID into Secret Manager for use by Predict"

              source /mascli/functions/gitops_utils
              # NOTE: cannot just render AWS secrets into here, as it will be exposed in the ArgoCD UI
              # Instead, we pass them into a secret (ArgoCD knows to hide any data fields in k8s secrets),
              # mount the secret on the jobs filesystem, and read them in here
              SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/aws/aws_access_key_id)
              SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/aws/aws_secret_access_key)
              export SM_AWS_REGION=${REGION_ID}
              sm_login

              SECRET_NAME_WSL_PROJECT_ID=${ACCOUNT_ID}/${CLUSTER_ID}/${INSTANCE_ID}/$CPD_WSL_PROJECT_NAME
              sm_update_secret $SECRET_NAME_WSL_PROJECT_ID "{\"wsl_project_id\": \"$WSL_PROJECT_ID\" }"

              echo "Done"

      restartPolicy: Never
      serviceAccountName: wsl-precheck-sa
      volumes:
        - name: aws
          secret:
            secretName: aws
            defaultMode: 420
            optional: false
  backoffLimit: 4