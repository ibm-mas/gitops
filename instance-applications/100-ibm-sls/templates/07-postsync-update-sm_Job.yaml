{{- if .Values.run_sync_hooks }}

{{ $ns := printf "mas-%s-sls" .Values.instance_id}}
{{ $aws_secret := "aws"}}
{{ $np_name :=    "postsync-ibm-sls-update-sm-np" }}
{{ $role_name :=  "postsync-ibm-sls-update-sm-r" }}
{{ $sa_name :=    "postsync-ibm-sls-update-sm-sa" }}
{{ $rb_name :=    "postsync-ibm-sls-update-sm-rb" }}
{{ $job_label :=  "postsync-ibm-sls-update-sm-job" }}



---
# Permit outbound communication by the Job pods
# (Needed to communicate with the K8S HTTP API and AWS SM)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $np_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "110"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job_label }}
  egress:
    - {}
  policyTypes:
    - Egress


---
kind: Secret
apiVersion: v1
metadata:
  name: {{ $aws_secret }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "110"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
data:
  aws_access_key_id: {{ .Values.sm_aws_access_key_id | b64enc }}
  aws_secret_access_key: {{ .Values.sm_aws_secret_access_key | b64enc }}
type: Opaque

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ $sa_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "110"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $role_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "110"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - verbs:
      - get
    apiGroups:
      - ""
    resources:
      - configmaps



---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rb_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "111"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: {{ $sa_name }}
    namespace: {{ $ns }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $role_name }}

---
apiVersion: batch/v1
kind: Job
metadata:
  # Generate the job name by suffixing the label with a hash of all chart values
  # This is to ensure that ArgoCD will delete and recreate the job if (and only if) anything changes
  # Any change to instance config will trigger a rerun of the job. 
  # We can refine this in future to only take into account a subset of instance config (perhaps just values under ibm_sls?).
  # But the job is idempotent and quick so no real harm in running it when we don't actually need to.
  name: "{{ $job_label }}-v1-{{ .Values | toYaml | adler32sum }}"
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "112"
    argocd.argoproj.io/sync-options: Prune=true
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job_label }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: ACCOUNT_ID
              value: {{ .Values.account_id }}
            - name: REGION_ID
              value: {{ .Values.region_id }}
            - name: CLUSTER_ID
              value: {{ .Values.cluster_id }}
            - name: INSTANCE_ID
              value: {{ .Values.instance_id }}
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
          volumeMounts:
            - name: aws
              mountPath: /etc/mas/creds/aws
            - name: sls-suite-registration
              mountPath: /etc/mas/creds/sls-suite-registration
          command:
            - /bin/sh
            - -c
            - |

              set -e

              # NOTE: cannot just render AWS secrets into here, as it will be exposed in the ArgoCD UI
              # Instead, we pass them into a secret (ArgoCD knows to hide any data fields in k8s secrets),
              # mount the secret on the jobs filesystem, and read them in here
              SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/aws/aws_access_key_id)
              SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/aws/aws_secret_access_key)

              echo "Fetching registrationKey from sls-suite-registration ConfigMap in mas-${INSTANCE_ID}-sls"
              SLS_REGISTRATION_KEY=$(cat /etc/mas/creds/sls-suite-registration/registrationKey)
              if [[ -z "${SLS_REGISTRATION_KEY}" ]]; then
                echo "Failed to fetch registrationKey"
                exit 1
              fi

              echo "Fetching ca from sls-suite-registration ConfigMap in mas-${INSTANCE_ID}-sls"
              SLS_CA=$(cat /etc/mas/creds/sls-suite-registration/ca | base64 -w0)
              if [[ -z "${SLS_CA}" ]]; then
                echo "Failed to fetch ca"
                exit 1
              fi

              # might as well take advantage of gitops_utils for sm_ functions as we're using the cli image
              source /mascli/functions/gitops_utils

              # aws configure set aws_access_key_id $SM_AWS_ACCESS_KEY_ID
              # aws configure set aws_secret_access_key $SM_AWS_SECRET_ACCESS_KEY
              # aws configure set default.region $REGION_ID
              # aws configure list
              export SM_AWS_REGION=${REGION_ID}
              sm_login

              # aws secretsmanager create-secret --name ${SECRET_NAME} --secret-string "${SECRET_VALUE}"
              SECRET_NAME_SLS=${ACCOUNT_ID}/${CLUSTER_ID}/${INSTANCE_ID}/sls
              sm_update_secret $SECRET_NAME_SLS "{\"registration_key\": \"$SLS_REGISTRATION_KEY\", \"ca_b64\": \"$SLS_CA\" }"


      restartPolicy: Never

      # TODO: is this the correct SA to use here?
      # No, probably want to add a more restricted SA that can just do things that these post-sync jobs need to do
      serviceAccountName: {{ $sa_name }}
      volumes:
        - name: aws
          secret:
            secretName: {{ $aws_secret }}
            defaultMode: 420
            optional: false
        - name: sls-suite-registration
          configMap:
            name: sls-suite-registration
            optional: false

  backoffLimit: 4
{{- end }}
