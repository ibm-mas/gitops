---
apiVersion: batch/v1
kind: Job
metadata:
  name: cpd-patch-zenservices-v4-{{ omit .Values "junitreporter" | toYaml | adler32sum }}
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "088"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: CPD_INSTANCE_NAMESPACE
              value: {{ .Values.cpd_instance_namespace }}
            - name: CPD_OPERATORS_NAMESPACE
              value: {{ .Values.cpd_operators_namespace }}
            - name: CPD_SCALE_CONFIG
              value: {{ .Values.cpd_scale_config }}
            - name: INSTANCE_ID
              value: {{ .Values.instance_id }}
          command:
            - /bin/bash
            - -c
            - |

              set -e

              echo
              echo "================================================================================"
              echo "Wait for ZenService Cr and patch it if needed"
              echo "================================================================================"
              echo
              
              echo
              echo "Wait for ibm-zen-operator to be ready"
              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1200 ]; then
                  echo "ZenService operator is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi
                ZEN_OPERATOR_LOOKUP=$(oc get deployment ibm-zen-operator -n $CPD_OPERATORS_NAMESPACE --ignore-not-found -ojsonpath='{.status.availableReplicas}')
                if [[ ! -z $ZEN_OPERATOR_LOOKUP ]]; then
                  echo "ZenService Operator has started"
                  break
                fi
              done
              echo "Patching ZenService lite-cr if not already patched"
              while true; do
                ZS_LOOKUP=$(oc get ZenService lite-cr -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.spec}')
                if [[ ! -z $ZS_LOOKUP ]]; then

                  echo "ZenService spec has been fetched"

                  ZEN_CR_VERSION=$((oc get ConfigMap olm-utils-cm -n mas-${INSTANCE_ID}-syncres -o json) | yq '.data.release_components_meta' | yq '.zen.cr_version')

                  CURR_VERSION=$(oc get ZenService lite-cr -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.spec.version}')
                  IS_PATCHED=$(oc get ZenService lite-cr -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.spec.ZenCoreMetaDb}')
                  
                  if [[ (-z $IS_PATCHED) || ($CURR_VERSION != $ZEN_CR_VERSION) ]]; then
                    echo "patching zenservice..."
                    oc patch --type='merge' ZenService lite-cr -n ${CPD_INSTANCE_NAMESPACE} -p "{\"spec\":{ \"version\":\"$ZEN_CR_VERSION\",\"scaleConfig\":\"$CPD_SCALE_CONFIG\",\"ZenCoreMetaDb\":{ \"name\":\"zen-metastoredb\",\"kind\":\"StatefulSet\",\"container\":\"zen-metastoredb\",\"replicas\":\"3\",\"resources\":{ \"limits\":{ \"cpu\":\"2\",\"memory\":\"4Gi\"},\"requests\":{ \"cpu\":\"200m\",\"memory\":\"1024Mi\"}}}}}"
                    
                    echo "scaling zen operator down and up to force reconcile when the pod is restarted"
                    oc scale deployment ibm-zen-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=0
                    oc scale deployment ibm-zen-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=1
                  fi
                  break
                fi
              done


              echo
              echo "================================================================================"
              echo "Patch zenmetastore postgres job to workaround https://www.ibm.com/support/pages/node/7158524"
              echo "================================================================================"
              echo
              echo "Wait for Zen Metastore EDB Cluster to be created"
              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1800 ]; then
                  echo "Zen Metastore EDB Cluster is not ready after 30 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                ZENCLUSTER_LOOKUP=$(oc get Cluster zen-metastore-edb -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.status}')
                if [[ ! -z $ZENCLUSTER_LOOKUP ]]; then
                  LICENSE_EXP=$(oc get Cluster zen-metastore-edb -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.status.licenseStatus.licenseExpiration}')
                  LICENSE_STATUS=$(oc get Cluster zen-metastore-edb -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -ojsonpath='{.status.licenseStatus.licenseStatus}')

                  echo
                  echo "================================================================================"
                  echo "Debug Zen Metastore Cluster License"
                  echo "================================================================================"
                  echo "- License Expiration ................ ${LICENSE_EXP}"
                  echo "- License Status .................... ${LICENSE_STATUS}"
                  echo 

                  if [[ -z $LICENSE_EXP ]]; then
                    while true; do
                      POSTGRES_STATUS_LOOKUP=$(oc get job create-postgres-license-config -n ${CPD_OPERATORS_NAMESPACE} --ignore-not-found -ojsonpath='{.status.conditions[].status}')
                      if [[ $POSTGRES_STATUS_LOOKUP == *"True"* ]]; then
                        echo "patching create-postgres-license-config job..."
                        oc get job create-postgres-license-config -n ${CPD_OPERATORS_NAMESPACE} -o yaml | \
                          sed -e 's/operator.ibm.com\/opreq-control: "true"/operator.ibm.com\/opreq-control: "false"/' \
                          -e 's|\(image: \).*|\1"cp.icr.io/cp/cpd/edb-postgres-license-provider@sha256:c1670e7dd93c1e65a6659ece644e44aa5c2150809ac1089e2fd6be37dceae4ce"|' \
                          -e '/controller-uid:/d' | \
                          oc replace --force -f -
                        break
                      fi
                    done
                  fi
                  break
                fi 
              done


      restartPolicy: Never
      serviceAccountName: cpd-sa
  backoffLimit: 4
