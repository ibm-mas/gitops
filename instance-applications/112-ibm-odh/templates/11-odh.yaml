# {{- $_job_name_prefix := "odh-sa-patch-job-v1" }}

# {{- /*
# Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
# Included in $_job_hash (see below).
# */}}
# {{- $_cli_image_digest := "sha256:934706a7173d45ea53c3d191afa6d75b4e41d25422e6a3685f1c57d1ddf49a00" }}

# {{- /*
# A dict of values that influence the behaviour of the job in some way.
# Any changes to values in this dict will trigger a rerun of the job.
# Since jobs must be idemopotent, it's generally safe to pass in values here that are not
# strictly necessary (i.e. including some values that don't actually influence job behaviour).
# We may want to refine this further though for jobs that can take a long time to complete.
# Included in $_job_hash (see below).
# */}}
# {{- $_job_config_values := omit .Values "junitreporter" }}

# {{- /*
# Increment this value whenever you make a change to an immutable field of the Job resource.
# E.g. passing in a new environment variable.
# Included in $_job_hash (see below).
# */}}
# {{- $_job_version := "v3" }}

# {{- /*
# 10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
# This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
# immutable field of any existing Job resource.
# */}}
# {{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

# {{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}


# {{- /*
# Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

# When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
# to identify old Job resources that should be pruned on behalf of ArgoCD.

# Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
# will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
# Jobs will be automatically deleted.

# $_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
# where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
# must be added to $_job_cleanup_group.

# By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
# are required here.

# */}}
# {{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}


# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: odh-sa
#   namespace: "{{ .Values.aibroker_namespace }}"
#   annotations:
#     argocd.argoproj.io/sync-wave: "139"

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: patch-serviceaccount-role
#   namespace: "{{ .Values.aibroker_namespace }}"
#   annotations:
#     argocd.argoproj.io/sync-wave: "140"
# rules:
#   - apiGroups: [""]
#     resources: ["serviceaccounts"]
#     verbs: ["get", "patch"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: patch-serviceaccount-binding
#   namespace: "{{ .Values.aibroker_namespace }}"
#   annotations:
#     argocd.argoproj.io/sync-wave: "141"
# subjects:
#   - kind: ServiceAccount
#     name: odh-sa
#     namespace: "{{ .Values.aibroker_namespace }}"
# roleRef:
#   kind: Role
#   name: patch-serviceaccount-role
#   apiGroup: rbac.authorization.k8s.io


# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: odh-sa-knative-patch-role
#   namespace: knative-serving
#   annotations:
#     argocd.argoproj.io/sync-wave: "142"
# rules:
#   - apiGroups: [""]
#     resources: ["configmaps"]
#     verbs: ["get", "patch"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: odh-sa-knative-patch-binding
#   namespace: knative-serving
#   annotations:
#     argocd.argoproj.io/sync-wave: "143"
# subjects:
#   - kind: ServiceAccount
#     name: odh-sa
#     namespace: "{{ .Values.aibroker_namespace }}"  # Still referencing from your values
# roleRef:
#   kind: Role
#   name: odh-sa-knative-patch-role
#   apiGroup: rbac.authorization.k8s.io

# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: {{ $_job_name }}-{{ omit .Values "junitreporter" | toYaml | adler32sum }}
#   namespace: "{{ .Values.aibroker_namespace }}"
#   annotations:
#     argocd.argoproj.io/sync-wave: "144"
#   labels:
#   mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
# spec:
#   template:
#     spec:
#       containers:
#         - name: run
#           image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
#           imagePullPolicy: IfNotPresent
#           resources:
#             limits:
#               cpu: 200m
#               memory: 512Mi
#             requests:
#               cpu: 10m
#               memory: 64Mi
#           env:
#             - name: AIBROKER_NAMESPACE
#               value: "{{ .Values.aibroker_namespace }}"
#           command:
#             - /bin/sh
#             - -c
#             - |
#               set -e
#               echo
#               echo "================================================================================"
#               echo "Provide ibm-entitlement-key image pull secret for 'pipeline-runner-instance' service accounts"
#               echo "================================================================================"
#               echo

#               sleep 60

#               RESOURCE_NAME=$(oc get serviceaccount pipeline-runner-instance -n ${AIBROKER_NAMESPACE} -o=jsonpath="{.metadata.name}" --ignore-not-found)
#               if [[ -n "${RESOURCE_NAME}" ]]; then
#                 echo "Patching 'pipeline-runner-instance' sa..."
#                 oc patch serviceaccount pipeline-runner-instance -n ${AIBROKER_NAMESPACE}  --type='merge' -p '{"imagePullSecrets":[{"name":"ibm-entitlement"}]}'
#               else
#                 echo "'pipeline-runner-instance' service account not found."
#               fi

#               echo
#               echo "================================================================================"
#               echo "Patching config-features in knative-serving"
#               echo "================================================================================"
#               echo

#               oc patch --namespace knative-serving configmap/config-features --type merge --patch '{"data":{"kubernetes.podspec-persistent-volume-claim":"enabled", "kubernetes.podspec-persistent-volume-write":"enabled"}}'

#               echo "Finished patching config-features in knative-serving"

#       restartPolicy: Never
#       serviceAccountName: odh-sa
#       automountServiceAccountToken: true
#       dnsPolicy: ClusterFirst
#   backoffLimit: 3
