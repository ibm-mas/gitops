---
apiVersion: v1
kind: ConfigMap
metadata:
  name: km-controller
  namespace: "{{ .Values.aibroker_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "178"
  labels:
    app: km-controller
data:
  DOCKER_SERVER: "{{ .Values.docker_server }}"
  PIPELINES_BUCKET: "{{ .Values.mas_aibroker_storage_pipelines_bucket }}"
  TENANTS_BUCKET: "{{ .Values.mas_aibroker_storage_tenants_bucket }}"
  DOCKER_SECRETS_NAME: "ibm-entitlement"
  CONNECTOR_IMAGE_PREFIX: ''
  PIPELINE_STEP_IMAGE_PREFIX: '' 
  PIPELINE_DEFAULT_STEP_TAG: "{{ .Values.mas_aibroker_pipeline_steps_tag }}"
  CONNECTOR_DEFAULT_TAG: "{{ .Values.mas_aibroker_connector_tag }}"
  {{- if .Values.mas_aibroker_saas }}
  DEFAULT_TENANTS:  "{{ .Values.mas_aibroker_provision_tenant }}"
  {{- else }}
  DEFAULT_TENANTS: "{{ .Values.tenantNamespace }}"
  {{- end }}
  PLATFORM: openshift
  PVC_STORAGE_CLASS_NAME: "{{ .Values.primary_storage_class }}"
  LOG_FORMAT: "json"
  MODEL_ID_UNIQUE_LENGTH: "{{ .Values.model_id_unique_length }}"
  MODEL_ID_PREFIX: "{{ .Values.model_id_prefix }}"


---
apiVersion: v1
kind: Service
metadata:
  name: km-controller
  namespace: "{{ .Values.aibroker_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "179"
spec:
  ports:
    - name: http
      port: 3000
      targetPort: http
    - name: https
      port: 8443
      targetPort: https
  selector:
    app: km-controller
  type: ClusterIP


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: km-controller-pvc
  namespace: "{{ .Values.aibroker_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "180"
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi
  storageClassName: "{{ .Values.primary_storage_class }}"


---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: km-controller
  namespace: "{{ .Values.aibroker_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "181"


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: km-controller
  namespace: "{{ .Values.aibroker_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "182"
  labels:
    app: km-controller
    component: controller
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: km-controller
  template:
    metadata:
      labels:
        app: km-controller
        component: controller
    spec:
      serviceAccountName: km-controller
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: km-controller-pvc
        - name: ssh-key
          secret:
            secretName: "{{ .Values.aibroker_internal_tls }}"
      imagePullSecrets:
        - name: "{{ .Values.pullSecretName }}"
      containers:
        - name: controller
          image: "{{ .Values.image_controller}}"
          imagePullPolicy: Always
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 3000
            - name: https
              containerPort: 8443
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "256Mi"
              cpu: "200m"
              ephemeral-storage: "2Gi"
          livenessProbe:
            httpGet:
              path: /api/v1/version
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 15
            periodSeconds: 500
          readinessProbe:
            httpGet:
              path: /api/v1/version
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 500
          env:
            - name: KMODELS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KMODELS_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: km-controller
            - secretRef:
                name: km-s3-secret
          volumeMounts:
            - name: storage
              mountPath: "/storage"
            - name: ssh-key
              mountPath: "/etc/ssl/certs"
              readOnly: true
