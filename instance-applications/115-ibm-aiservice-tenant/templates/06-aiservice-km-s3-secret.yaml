{{- $_job_name_prefix := printf "presync-copy-ai-secrets-%s" .Values.tenantNamespace }}
{{- $_cli_image_digest := "sha256:834dffd4da534c01daea4e0a6d9db7d00a9ad9b18b054cc034985fcaceedeacd" }}
{{- $_job_config_values := omit .Values "junitreporter" }}
{{- $_job_version := "v3" }}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}
{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash ) }}
{{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: copy-secret-job-{{ .Values.tenantNamespace }}
  namespace: {{ .Values.aiservice_namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "305"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader-{{ .Values.tenantNamespace }}
  namespace: {{ .Values.aiservice_namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "305"
rules:
  - apiGroups: [""]
    resources: ["secrets,pods"]
    verbs: ["get", "list"]

# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   annotations:
#     argocd.argoproj.io/sync-wave: '305'
#   labels:
#     app.kubernetes.io/instance: aiservice-tenant.sremat-demo1.inst1.t02
#   name: secret-reader-aiservice-inst1-t02
#   namespace: aiservice-inst1
# rules:
#   - apiGroups: [""]
#     resources: ["secrets", "pods"]
#     verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-reader-binding-{{ .Values.tenantNamespace }}
  namespace: {{ .Values.aiservice_namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "306"
subjects:
  - kind: ServiceAccount
    name: copy-secret-job-{{ .Values.tenantNamespace }}
    namespace: {{ .Values.aiservice_namespace }}
roleRef:
  kind: Role
  name: secret-reader-{{ .Values.tenantNamespace }}
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-writer-{{ .Values.tenantNamespace }}
  namespace: {{ .Values.tenantNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "306"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-writer-binding-{{ .Values.tenantNamespace }}
  namespace: {{ .Values.tenantNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "306"
subjects:
  - kind: ServiceAccount
    name: copy-secret-job-{{ .Values.tenantNamespace }}
    namespace: {{ .Values.aiservice_namespace }}
roleRef:
  kind: Role
  name: secret-writer-{{ .Values.tenantNamespace }}
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: {{ .Values.aiservice_namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "307"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: sync-job
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: copy-secret-job-{{ .Values.tenantNamespace }}
      restartPolicy: OnFailure
      containers:
        - name: copy-secrets
          image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
          imagePullPolicy: IfNotPresent
          env:
            - name: SOURCE_NAMESPACE
              value: "{{ .Values.aiservice_namespace }}"
            - name: TARGET_NAMESPACE
              value: "{{ .Values.tenantNamespace }}"
            - name: SECRETS_TO_COPY
              value: "ibm-entitlement km-s3-secret"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting secret copy from $SOURCE_NAMESPACE to $TARGET_NAMESPACE"
              for SECRET_NAME in $SECRETS_TO_COPY; do
                echo "--------------------------------------------------------"
                echo "Copying secret: $SECRET_NAME"
                echo "--------------------------------------------------------"

                if ! kubectl get secret $SECRET_NAME -n $SOURCE_NAMESPACE -o json > /tmp/${SECRET_NAME}.json; then
                  echo "Failed to get secret $SECRET_NAME from $SOURCE_NAMESPACE"
                  exit 1
                fi

                # Clean metadata fields to avoid resourceVersion conflicts
                jq 'del(.metadata.resourceVersion, .metadata.uid, .metadata.creationTimestamp, .metadata.selfLink, .metadata.managedFields)' /tmp/${SECRET_NAME}.json \
                  | sed "s/\"namespace\": \"$SOURCE_NAMESPACE\"/\"namespace\": \"$TARGET_NAMESPACE\"/" > /tmp/${SECRET_NAME}_clean.json

                if ! kubectl apply -f /tmp/${SECRET_NAME}_clean.json; then
                  echo "Failed to apply $SECRET_NAME to $TARGET_NAMESPACE"
                  exit 1
                fi

                if ! kubectl get secret $SECRET_NAME -n $TARGET_NAMESPACE > /dev/null; then
                  echo "Secret $SECRET_NAME not found in $TARGET_NAMESPACE after apply"
                  exit 1
                fi

                echo "Successfully copied $SECRET_NAME to $TARGET_NAMESPACE"
              done
              echo "All secrets copied successfully"
