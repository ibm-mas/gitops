---
kind: Secret
apiVersion: v1
metadata:
  name: "aws-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "127"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
data:
  aws_access_key_id: {{ .Values.sm_aws_access_key_id | b64enc }}
  aws_secret_access_key: {{ .Values.sm_aws_secret_access_key | b64enc }}
{{- if .Values.db2_backup_bucket_name }}
  db2_backup_bucket_access_key: {{ .Values.db2_backup_bucket_access_key | b64enc }}
  db2_backup_bucket_secret_key: {{ .Values.db2_backup_bucket_secret_key | b64enc }}
  icd_auth_key: {{ .Values.db2_backup_icd_auth_key | b64enc }}
{{- end }}
type: Opaque

---
# Service account that is authorized to read k8s secrets (needed by the job)
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "postsync-sa-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "127"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}


---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "db2-database-postsync-sa-role-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "127"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - get
    - list
    - watch
    - update
    - patch
- apiGroups:
    - ""
  resources:
    - pods/exec
  verbs: 
    - create
    - get
    - list
- apiGroups:
    - ""
  resources: 
    - services
  verbs: 
    - "get"
- apiGroups:
    - db2u.databases.ibm.com
  resources: 
    - db2uinstances
  verbs: 
    - "get"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "db2-database-postsync-sa-rb-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "128"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: "postsync-sa-{{ .Values.db2_instance_name }}"
    namespace: "{{ .Values.db2_namespace }}"
roleRef:
  kind: Role
  name: "db2-database-postsync-sa-role-{{ .Values.db2_instance_name }}"
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: batch/v1
kind: Job
metadata:
  # Suffix the Job name with a hash of all chart values
  # This is to ensure that ArgoCD will delete and recreate the job if (and only if) anything changes in the DB2 config
  name: postsync-setup-db2-{{ .Values.db2_instance_name }}-v6-{{ omit .Values "junitreporter" | toYaml | adler32sum }}
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "129"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: ACCOUNT_ID
              value: {{ .Values.account_id }}
            - name: REGION_ID
              value: {{ .Values.region_id }}
            - name: CLUSTER_ID
              value: {{ .Values.cluster_id }}
            - name: MAS_INSTANCE_ID
              value: {{ .Values.instance_id }}
            - name: MAS_APP_ID
              value: {{ .Values.mas_application_id}}
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
            - name: DB2_NAMESPACE
              value: "{{ .Values.db2_namespace }}"
            - name: DB2_INSTANCE_NAME
              value: "{{ .Values.db2_instance_name }}"
            - name: DB2_DBNAME
              value: "{{ .Values.db2_dbname }}"
            - name: DB2_TLS_VERSION
              value: "{{ .Values.db2_tls_version }}"
            - name: DB2_INSTANCE_HOME_PATH
              value: "{{ .Values.db2_instance_home_path }}"
{{- if .Values.db2_backup_bucket_name }}
            - name: BUCKET_NAME
              value: "{{ .Values.db2_backup_bucket_name }}"
            - name: COS_SERVER
              value: "{{ .Values.db2_backup_bucket_endpoint }}"
            - name: SLACKURL
              value: "{{ .Values.db2_backup_notify_slack_url }}"
{{- end }}

          volumeMounts:
            - name: aws
              mountPath: /etc/mas/creds/aws
            - name: db2u-certificate
              mountPath: /etc/mas/creds/db2u-certificate
{{- if .Values.db2_backup_bucket_name }}
            - name: db2-scripts
              mountPath: "/tmp/db2-scripts/"
{{- end }}
          command:
            - /bin/sh
            - -c
            - |

              set -e

              source /mascli/functions/gitops_utils

              function wait_for_resource {
                RES_TYPE="$1"
                RES_NAME="$2"
                RES_NS="$3"
                RETRIES=${4:-10}
                RETRY_DELAY_SECONDS=${5:-30}

                for (( c=1; c<="${RETRIES}"; c++ )); do

                  echo "... attempt ${c} of ${RETRIES}"

                  rc=0
                  oc get "${RES_TYPE}/${RES_NAME}" -n "${RES_NAMESPACE}" || rc=$?
                  if [[ "$rc" == "0" ]]; then
                    echo "...... success"
                    return 0
                  fi

                  if [[ "${c}" -lt "${RETRIES}" ]]; then
                    echo "...... failed (rc: ${rc}), retry in ${RETRY_DELAY_SECONDS}s"
                    sleep $RETRY_DELAY_SECONDS
                  fi
                done

                echo "...... failed, no attempts remain"
                return 1
              }


              # The Db2u operator is capable of automatically applying dbConfig, dbmConfig and registry configuration parameters specified on the Db2uInstance CR.
              # However, certain parameters (e.g. MIRRORLOGPATH)  may reference paths on the db2u pod (e.g. /mnt/backup/MIRRORLOGPATH) that do not exist until 
              # after the operator has already attemped to apply settings (which it will not subsequently reattempt if something went wrong).
              # To work around this, we manually re-invoke this process again by calling the '/db2u/scripts/apply-db2cfg-settings.sh --setting all' script on the db2 pod.

              # Moreover, the Db2u operator it does not give any indication on any CR if something went wrong while attempting to apply these settings (and no meaningful return code is provided by the apply-db2cfg-settings.sh script)
              # For this reason, we are forced to perform our own verification that the settings on the Db2uInstance CR align with those active in DB2 
              # This is done using the "mas-devops-db2-validate-config" command from the mas-devops library (see https://github.com/ibm-mas/python-devops)
              function db2apply {
                RETRIES=${1:-5}
                RETRY_DELAY_SECONDS=${2:-30}

                mas-devops-db2-validate-config --mas-instance-id ${MAS_INSTANCE_ID} --mas-app-id ${MAS_APP_ID} --log-level DEBUG || rc=$?
                if [[ "$rc" == "0" ]]; then
                  echo "... db2 config already matches expected config, returning without calling apply-db2cfg-settings"
                  return 0
                fi

                for (( c=1; c<="${RETRIES}"; c++ )); do
                  echo ""
                  echo "... attempt ${c} of ${RETRIES}"
                  oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc '/db2u/scripts/apply-db2cfg-settings.sh --setting all | tee /tmp/apply-db2cfg-settings.log' db2inst1
                  # no useful info in return code of this script

                  rc=0
                  mas-devops-db2-validate-config --mas-instance-id ${MAS_INSTANCE_ID} --mas-app-id ${MAS_APP_ID} --log-level DEBUG || rc=$?
                  if [[ "$rc" == "0" ]]; then
                    echo "...... success"
                    return 0
                  fi

                  if [[ "${c}" -lt "${RETRIES}" ]]; then
                    echo "...... failed (rc: ${rc}), retry in ${RETRY_DELAY_SECONDS}s"
                    sleep $RETRY_DELAY_SECONDS
                  fi
                done

                echo "...... failed, no attempts remain"
                return 1
              }

              export DB2_CONFIG_SECRET=${ACCOUNT_ID}/${CLUSTER_ID}/${MAS_INSTANCE_ID}/jdbc/${DB2_INSTANCE_NAME}/config

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "ACCOUNT_ID .......................... ${ACCOUNT_ID}"
              echo "REGION_ID ........................... ${REGION_ID}"
              echo "CLUSTER_ID .......................... ${CLUSTER_ID}"
              echo "MAS_INSTANCE_ID ..................... ${MAS_INSTANCE_ID}"
              echo "MAS_APP_ID .......................... ${MAS_APP_ID}"
              echo "AVP_TYPE ............................ ${AVP_TYPE}"
              echo "DB2_NAMESPACE ....................... ${DB2_NAMESPACE}"
              echo "DB2_INSTANCE_NAME ................... ${DB2_INSTANCE_NAME}"
              echo "DB2_DBNAME .......................... ${DB2_DBNAME}"

              export SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/aws/aws_access_key_id)
              export SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/aws/aws_secret_access_key)
              export SM_AWS_REGION=${REGION_ID}

              if [[ -n $BUCKET_NAME ]]; then
                export DB2_BACKUP_BUCKET_ACCESS_KEY=$(cat /etc/mas/creds/aws/db2_backup_bucket_access_key)
                export DB2_BACKUP_BUCKET_SECRET_KEY=$(cat /etc/mas/creds/aws/db2_backup_bucket_secret_key)
                export ICD_AUTH_KEY=$(cat /etc/mas/creds/aws/icd_auth_key)
              fi
             
              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${DB2_INSTANCE_NAME}-db2u-0 to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "pod" "c-${DB2_INSTANCE_NAME}-db2u-0" "${DB2_NAMESPACE}"

              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${DB2_INSTANCE_NAME}-db2u-0 to report Ready=True before continuing (timeout 300s)"
              echo "================================================================================"
              oc wait --for=condition=Ready pod/c-${DB2_INSTANCE_NAME}-db2u-0 --timeout 300s -n ${DB2_NAMESPACE}

              echo ""
              echo "================================================================================"
              echo "Waiting for service c-${DB2_INSTANCE_NAME}-db2u-engn-svc to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "svc" "c-${DB2_INSTANCE_NAME}-db2u-engn-svc" "${DB2_NAMESPACE}"

              echo ""
              echo "Creating /mnt/backup/MIRRORLOGPATH in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p /mnt/backup/MIRRORLOGPATH" db2inst1 || exit $?

              echo ""
              echo "Creating /mnt/backup/staging in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p /mnt/backup/staging" db2inst1 || exit $?

              echo ""
              echo "Creating /mnt/backup/bin in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p /mnt/backup/bin" db2inst1 || exit $?

              echo ""
              echo "Getting Instance owner and home directory in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              INSTOWNER='db2inst1'
              echo "Instance owner is ${INSTOWNER}"
              INSTHOME=`oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "cat /etc/passwd | grep ${INSTOWNER} | cut -d: -f6" db2inst1`
              echo "Instance home directory is ${INSTHOME}"

              echo ""
              echo "Creating ${INSTHOME}/bin in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p ${INSTHOME}/bin" db2inst1 || exit $?

              echo ""
              echo "Creating ${INSTHOME}/bin/ITCS104 in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p ${INSTHOME}/bin/ITCS104" db2inst1 || exit $?

              echo ""
              echo "Creating ${INSTHOME}/Managed in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p ${INSTHOME}/Managed" db2inst1 || exit $?

              echo ""
              echo "Creating ${INSTHOME}/maintenance in c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p ${INSTHOME}/maintenance" db2inst1 || exit $?

              if [[ -n $BUCKET_NAME ]]; then
                echo ""
                echo "Copying all the required DB2 scripts in c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "mkdir -p /tmp/db2-scripts/" db2inst1 || exit $?
                cd /tmp
                zip -r db2-scripts.zip db2-scripts/
                oc cp /tmp/db2-scripts.zip ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:/tmp/db2-scripts.zip -c db2u || exit $?
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "cd /tmp; unzip -o db2-scripts.zip; chmod -R +x /tmp/db2-scripts" db2inst1 || exit $?
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0  -- su -lc "/tmp/db2-scripts/CopyDBScripts.sh | tee /tmp/copydbscripts.log" db2inst1 || exit $?
              fi

              if [[ "$MAS_APP_ID" == "manage" ]]; then
                echo ""
                echo "================================================================================"
                echo "Invoke Suite DB2 setup for Manage"
                echo "================================================================================"
                # Copy and run a script on the db2u pod to perform Manage-specific setup tasks

                # Path to the generated script, on both this pod and on the db2u pod
                SETUPDB_SH_PATH="/tmp/setupdb.sh"

                echo ""
                echo "Create ${SETUPDB_SH_PATH}"
                echo "--------------------------------------------------------------------------------"

                # Generate a script to copy and run on the db2u pod
                cat > ${SETUPDB_SH_PATH} << EOF
                  #!/bin/bash

                  TBSP_SQL="/tmp/.tbsp.sql"

                  if [ -f \$TBSP_SQL ]; then
                      rm \$TBSP_SQL
                  fi

                  if ! db2gcf -s | grep Available >/dev/null; then

                      db2_kill
                      ipclean -a
                      db2start

                      if ! db2gcf -s | grep Available >/dev/null; then
                          echo "Instance is not up. Please check."
                          exit 1
                      fi

                  fi

                  db2 connect to ${DB2_DBNAME}
                  if [ \$? != 0 ]; then
                    echo "Failed to connect to database!"
                    exit 1
                  fi

                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.bufferpools
                  where BPNAME='MAXBUFPOOL')
                  then 'CREATE BUFFERPOOL MAXBUFPOOL SIZE 8192 AUTOMATIC PAGESIZE 32 K;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >\$TBSP_SQL
                  maxd_bpf=\$?
                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.bufferpools
                  where BPNAME='MAXBUFPOOLINDX')
                  then 'CREATE BUFFERPOOL MAXBUFPOOLINDX SIZE 8192 AUTOMATIC PAGESIZE 32 K;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >>\$TBSP_SQL
                  maxi_bpf=\$?
                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.bufferpools
                  where BPNAME='MAXTEMPBP')
                  then 'CREATE BUFFERPOOL MAXTEMPBP SIZE 8192 AUTOMATIC PAGESIZE 32 K;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >>\$TBSP_SQL
                  maxtmp_bpf=\$?
                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.tablespaces
                  where TBSPACE='MAXDATA')
                  then 'CREATE TABLESPACE MAXDATA PAGESIZE 32 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL MAXBUFPOOL;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >>\$TBSP_SQL
                  maxd_tbsp=\$?
                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.tablespaces
                  where TBSPACE='MAXINDEX')
                  then 'CREATE TABLESPACE MAXINDEX PAGESIZE 32 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL MAXBUFPOOLINDX;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >>\$TBSP_SQL
                  maxi_tbsp=\$?
                  db2 -x "select case when NOT exists(
                  select 1
                  from syscat.tablespaces
                  where TBSPACE='MAXTEMP')
                  then 'CREATE TEMPORARY TABLESPACE MAXTEMP PAGESIZE 32 K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL MAXTEMPBP;'
                  else '--'
                  end
                  from sysibm.sysdummy1"  >>\$TBSP_SQL
                  maxtmp_tbsp=\$?

                  if [[ "\$maxd_bpf" -eq  "0" && "\$maxi_bpf" -eq  "0" && "\$maxtmp_bpf" -eq "0"  && "\$maxd_tbsp" -eq  "0" && "\$maxi_tbsp" -eq "0" && "\$maxtmp_tbsp" -eq "0" && -f "\$TBSP_SQL" ]]; then
                      db2 -tvf \$TBSP_SQL
                      if grep -qw 'CREATE' \$TBSP_SQL; then
                        db2 connect reset
                        db2stop force
                        ipclean
                        db2start
                        db2 connect to ${DB2_DBNAME}
                        sleep 30
                      fi
                      rm \$TBSP_SQL
                  else
                      echo "Error detected."
                      exit 1
                  fi               
              EOF
                # IMPORTANT: Do not make any changes to the "EOF" line above (including its indentation)

                chmod +x ${SETUPDB_SH_PATH}

                echo ""
                echo "Copy ${SETUPDB_SH_PATH} to ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc cp ${SETUPDB_SH_PATH} ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:${SETUPDB_SH_PATH} -c db2u || exit $?

                echo ""
                echo "Executing ${SETUPDB_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${SETUPDB_SH_PATH} | tee /tmp/setupdb.log" db2inst1 || exit $?

                if [[ -n $BUCKET_NAME ]]; then
                  CREATE_ROLES_SH_PATH="${DB2_INSTANCE_HOME_PATH}/bin/CreateRoles.sh"
                  echo ""
                  echo "Executing ${CREATE_ROLES_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                  echo "--------------------------------------------------------------------------------"
                  oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "cd ${DB2_INSTANCE_HOME_PATH}/bin; ${CREATE_ROLES_SH_PATH} | tee /tmp/createroles.log" db2inst1 || exit $?
                fi

                  
              fi # [[ "$MAS_APP_ID" == "manage" ]]

              if [[ -n $BUCKET_NAME ]]; then
                POST_BACKFLOW_SH_PATH="${DB2_INSTANCE_HOME_PATH}/Managed/PostBackFlow.sh"
                echo ""
                echo "Executing ${POST_BACKFLOW_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${POST_BACKFLOW_SH_PATH} | tee /tmp/postbackflowscriptcreation.log" db2inst1 || exit $?
              fi

              echo ""
              echo "================================================================================"
              echo "Calling apply-db2cfg-settings.sh file on c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "================================================================================"
              db2apply || exit $?

              echo ""
              echo "================================================================================"
              echo "Invoke Suite DB2 Backup"
              echo "================================================================================"
              # Some parameters like LOGARCHMETH1 being set can cause a backup to be needed as it moves
              # to archival logging. 
              # Copy and run a script on the db2u pod to perform that backup now if we are in that state.

              # Path to the generated script, on both this pod and on the db2u pod
              BACKUPDB_SH_PATH="/tmp/backupdb.sh"

              echo ""
              echo "Create ${BACKUPDB_SH_PATH}"
              echo "--------------------------------------------------------------------------------"

              # Generate a script to copy and run on the db2u pod
              cat > ${BACKUPDB_SH_PATH} << EOF
                #!/bin/bash

                # Check that connect returns SQL1116N which means BACKUP PENDING state
                if db2 connect to ${DB2_DBNAME} | grep SQL1116N >/dev/null; then
                  echo "backupdb.sh: Database connect returning SQL1116N, do backup now"
                else
                  echo "backupdb.sh: Database connect not returning SQL1116N, nothing to do, exit now"
                  exit 0
                fi

                echo "backupdb.sh: Creating backup folder /mnt/backup"
                mkdir -p /mnt/backup
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2 force applications"
                db2 force application all
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: Turn off comms manager"
                db2set -null DB2COMM
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: Deactivate database"
                db2 deactivate database ${DB2_DBNAME}
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2stop"
                db2stop force
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2start in admin mode"
                db2start admin mode restricted access
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                # dbstart does not always start straight away, wait 20 seconds
                sleep 20

                echo "backupdb.sh: db2 backup db ${DB2_DBNAME} on all dbpartitionnums"
                db2 backup db ${DB2_DBNAME} on all dbpartitionnums to /mnt/backup
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2stop"
                db2stop force
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2set comms manager"
                db2set DB2COMM=SSL
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc

                echo "backupdb.sh: db2start"
                db2start
                rc=\$?
                [ \$rc -ne 0 ] && exit \$rc
              EOF
              # IMPORTANT: Do not make any changes to the "EOF" line above (including its indentation)

              chmod +x ${BACKUPDB_SH_PATH} || exit $?

              echo ""
              echo "Copy ${BACKUPDB_SH_PATH} to ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc cp ${BACKUPDB_SH_PATH} ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:${BACKUPDB_SH_PATH} -c db2u || exit $?

              echo ""
              echo "Executing ${BACKUPDB_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${BACKUPDB_SH_PATH} | tee /tmp/backupdb.log" db2inst1 || exit $?

              echo ""
              echo "================================================================================"
              echo "Setting ${DB2_CONFIG_SECRET} secret"
              echo "================================================================================"


              echo ""
              echo "Fetch CA cert from db2u-certicate-${DB2_INSTANCE_NAME} secret in ${DB2_NAMESPACE}"
              echo "--------------------------------------------------------------------------------"
              export DB2_CA_PEM=$(cat /etc/mas/creds/db2u-certificate/ca.crt | base64 -w0)
              if [[ -z "${DB2_CA_PEM}" ]]; then
                echo "Failed to fetch db2 ca pem"
                exit 1
              fi

              echo ""
              echo "Fetch ssl-server target port of c-${DB2_INSTANCE_NAME}-db2u-engn-svc service in ${DB2_NAMESPACE}"
              echo "--------------------------------------------------------------------------------"
              export DB2_TLS_SERVICEPORT=$(oc get svc c-${DB2_INSTANCE_NAME}-db2u-engn-svc -n ${DB2_NAMESPACE} -o=jsonpath="{.spec.ports[?(@.name=='ssl-server')].targetPort}")
              if [[ -z "${DB2_TLS_SERVICEPORT}" ]]; then
                echo "Failed to fetch db2 tls service port"
                exit 1
              fi

              echo ""
              echo "Construsting JDBC_CONNECTION_URL"
              echo "--------------------------------------------------------------------------------"
              export JDBC_CONNECTION_URL="jdbc:db2://c-${DB2_INSTANCE_NAME}-db2u-engn-svc.${DB2_NAMESPACE}.svc:${DB2_TLS_SERVICEPORT}/${DB2_DBNAME}:sslConnection=true;sslVersion=${DB2_TLS_VERSION};"

              echo ""
              echo "Updating Secrets Manager"
              echo "--------------------------------------------------------------------------------"
              sm_login
              TAGS="[{\"Key\": \"source\", \"Value\": \"postsync-setup-db2\"}, {\"Key\": \"account\", \"Value\": \"${ACCOUNT_ID}\"}, {\"Key\": \"cluster\", \"Value\": \"${CLUSTER_ID}\"}]"
              sm_update_secret ${DB2_CONFIG_SECRET} "{ \"jdbc_connection_url\": \"${JDBC_CONNECTION_URL}\", \"jdbc_instance_name\": \"${DB2_INSTANCE_NAME}\", \"ca_b64\": \"${DB2_CA_PEM}\", \"db2_dbname\": \"${DB2_DBNAME}\", \"db2_namespace\": \"${DB2_NAMESPACE}\" }" "${TAGS}" || exit $?

              if [[ -n $BUCKET_NAME ]]; then
                echo ""
                echo "================================================================================"
                echo "Invoke Fix invalid objects for Manage"
                echo "================================================================================"

                FIX_INVALID_OBJECTS_SH_PATH="${DB2_INSTANCE_HOME_PATH}/bin/ITCS104/FixInvalidObjects.sh"

                echo ""
                echo "Executing ${FIX_INVALID_OBJECTS_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${FIX_INVALID_OBJECTS_SH_PATH} | tee /tmp/fixInvalidObjects.log" db2inst1 || exit $?

                SQL_FILES_AVAILABLE=`oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "find ${INSTHOME} -name \"ALL_*.sql\"" db2inst1 || exit $?`

                if [[ -z $SQL_FILES_AVAILABLE ]]; then

                  echo ""
                  echo "================================================================================"
                  echo "Invoke Tablespace alter script for DB2"
                  echo "================================================================================"

                  LARGE_TBSP_SH_PATH="${DB2_INSTANCE_HOME_PATH}/Managed/Reg-Large_TBSP.sh"

                  echo ""
                  echo "Executing ${LARGE_TBSP_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                  echo "--------------------------------------------------------------------------------"
                  oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${LARGE_TBSP_SH_PATH} | tee /tmp/regLargeTbsp.log" db2inst1 || exit $?

                fi

                PROPS_FILE_NAME=".PROPS"
                echo ""
                echo "Creating .PROPS file"
                echo "--------------------------------------------------------------------------------"

                echo "PARM1=${DB2_BACKUP_BUCKET_ACCESS_KEY}" > /tmp/${PROPS_FILE_NAME}
                echo "PARM2=${DB2_BACKUP_BUCKET_SECRET_KEY}" >> /tmp/${PROPS_FILE_NAME}
                echo "CONTAINER=${BUCKET_NAME}" >> /tmp/${PROPS_FILE_NAME}
                echo "SERVER=${COS_SERVER}" >> /tmp/${PROPS_FILE_NAME}
                echo "SLACKURL=${SLACKURL}" >> /tmp/${PROPS_FILE_NAME}
                echo "DAYOFFULL=Sat" >> /tmp/${PROPS_FILE_NAME}
                echo "NUMOFBKUPTOKEEP=60" >> /tmp/${PROPS_FILE_NAME}
                echo "ICD_AUTH_KEY=${ICD_AUTH_KEY}" >> /tmp/${PROPS_FILE_NAME}

                echo ""
                echo "Copy ${PROPS_FILE_NAME} to ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc cp /tmp/${PROPS_FILE_NAME} ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:/tmp/${PROPS_FILE_NAME} -c db2u || exit $?
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "sudo mv /tmp/${PROPS_FILE_NAME} /mnt/backup/bin/${PROPS_FILE_NAME}" db2inst1 || exit $?

                SET_COS_STORAGE_SH_PATH="${INSTHOME}/Managed/Set_DB_COS_Storage.sh"

                echo ""
                echo "Executing ${SET_COS_STORAGE_SH_PATH} file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${SET_COS_STORAGE_SH_PATH} | tee /tmp/setcosstorage.log" db2inst1 || exit $?

                CHECK_COS_STORAGE_SH_PATH="CheckCOS.sh"
                echo ""
                echo "Executing ${INSTHOME}/bin/CheckCOS.sh file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${INSTHOME}/bin/CheckCOS.sh | tee /tmp/checkcos.log" db2inst1 || exit $?

                echo ""
                echo "Executing ${INSTHOME}/bin/RUN_OnDemandFULL_BKP.sh file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${INSTHOME}/bin/RUN_OnDemandFULL_BKP.sh | tee /tmp/runondemandfullbackup.log" db2inst1 || exit $?

                DROP_TEMPTS="/tmp/db2-scripts/dropTempts.sh"
                echo ""
                echo "Executing  file ${DROP_TEMPTS} on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${DROP_TEMPTS} | tee /tmp/dropTempts.log" db2inst1 || exit $?

                echo ""
                echo "Executing ${INSTHOME}/bin/RUN_OnDemandFULL_BKP.sh file on ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${INSTHOME}/bin/RUN_OnDemandFULL_BKP.sh | tee /tmp/runondemandfullbackup.log" db2inst1 || exit $?
              fi

      restartPolicy: Never

      serviceAccountName: "postsync-sa-{{ .Values.db2_instance_name }}"
      volumes:
        - name: aws
          secret:
            secretName: "aws-{{ .Values.db2_instance_name }}"
            defaultMode: 420
            optional: false
        - name: db2u-certificate
          secret:
            secretName: "db2u-certificate-{{ .Values.db2_instance_name }}"
            defaultMode: 420
            optional: false
{{- if .Values.db2_backup_bucket_name }}
        - name: db2-scripts
          configMap:
            name: db2u-scripts-{{ .Values.db2_instance_name }}-configmap
{{- end }}
  backoffLimit: 4
