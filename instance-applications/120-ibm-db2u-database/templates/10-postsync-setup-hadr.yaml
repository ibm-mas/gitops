{{ if and (default .Values.replica_db false) (contains "sdb" .Values.db2_instance_name) }}


{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "postsync-setup-hadr" }}

{{- /*
Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:b3ecce096368c967bbc6bac2f074473a65418462417b6e550ad4777427c3b06b" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v5" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}

{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.
NOTE: this is one of those cases; we need a separate cleanup group for each DB2 database

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix .Values.db2_instance_name | sha1sum }}

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "postsync-hadr-sa-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "128"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}


---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "db2-database-postsync-hadr-sa-role-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "128"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - ""
  resources:
    - pods/exec
  verbs:
    - get
    - list
    - create
- apiGroups:
    - ""
  resources:
    - services
  verbs:
    - "get"
- apiGroups:
    - db2u.databases.ibm.com
  resources:
    - db2uinstances
  verbs:
    - "get"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "db2-database-postsync-hadr-sa-rb-{{ .Values.db2_instance_name }}"
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "128"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: "postsync-hadr-sa-{{ .Values.db2_instance_name }}"
    namespace: "{{ .Values.db2_namespace }}"
roleRef:
  kind: Role
  name: "db2-database-postsync-hadr-sa-role-{{ .Values.db2_instance_name }}"
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: "{{ .Values.db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      restartPolicy: Never
      serviceAccountName: "postsync-hadr-sa-{{ .Values.db2_instance_name }}"
      containers:
        - name: run
          image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: MAS_INSTANCE_ID
              value: {{ .Values.instance_id }}
            - name: MAS_APP_ID
              value: {{ .Values.mas_application_id}}
            - name: DB2_NAMESPACE
              value: "{{ .Values.db2_namespace }}"
            - name: DB2_INSTANCE_NAME
              value: "{{ .Values.db2_instance_name }}"
            - name: DB2_DBNAME
              value: "{{ .Values.db2_dbname }}"
            - name: DB2_BACKUP_INSTALL
              value: 'true'
          command:
            - /bin/sh
            - -c
            - |

              set -e

              source /mascli/functions/gitops_utils

              PRIMARY_HADR_ROLE=''
              PRIMARY_HADR_STATE=''
              PRIMARY_HADR_STATUS=''
              PRIMARY_HADR_STATUS_TIME=''
              STANDBY_HADR_ROLE=''
              STANDBY_HADR_STATE=''
              STANDBY_HADR_STATUS=''
              STANDBY_HADR_STATUS_TIME=''

              function wait_for_resource {
                RES_TYPE="$1"
                RES_NAME="$2"
                RES_NS="$3"
                RETRIES=${4:-10}
                RETRY_DELAY_SECONDS=${5:-30}

                for (( c=1; c<="${RETRIES}"; c++ )); do

                  echo "... attempt ${c} of ${RETRIES}"

                  rc=0
                  oc get "${RES_TYPE}/${RES_NAME}" -n "${RES_NAMESPACE}" || rc=$?
                  if [[ "$rc" == "0" ]]; then
                    echo "...... success"
                    return 0
                  fi

                  if [[ "${c}" -lt "${RETRIES}" ]]; then
                    echo "...... failed (rc: ${rc}), retry in ${RETRY_DELAY_SECONDS}s"
                    sleep $RETRY_DELAY_SECONDS
                  fi
                done

                echo "...... failed, no attempts remain"
                return 1
              }

              function restart_hadr {
                PRIMARY_DB2_INSTANCE_NAME=${DB2_INSTANCE_NAME:0:-4}
                # # Start hadr in standby
                echo ""
                echo "Starting HADR in standby"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2stop force; db2start; db2 start hadr on db bludb as standby" db2inst1 || exit $?

                # # Start hadr in Primary
                echo ""
                echo "Starting HADR in primary"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2stop force; db2start; db2 start hadr on db bludb as primary" db2inst1 || exit $?

                echo "...... HADR services are started successfully"
              }

              function db2apply() {
                PRIMARY_ROLE="$1"
                STANDBY_ROLE="$2"
                RETRIES=${3:-5}
                RETRY_DELAY_SECONDS=${4:-30}

                mas-devops-db2-validate-config --mas-instance-id ${MAS_INSTANCE_ID} --mas-app-id ${MAS_APP_ID} --database-role standby --log-level DEBUG || rc=$?
                if [[ "$rc" == "0" && $PRIMARY_ROLE == 'PRIMARY' && $STANDBY_ROLE == 'STANDBY' ]]; then
                  echo "... db2 config already matches expected config, returning without calling apply-db2cfg-settings"
                  return 0
                fi

                if [[ "$rc" != "0" ]]; then
                  for (( c=1; c<="${RETRIES}"; c++ )); do
                    echo ""
                    echo "... attempt ${c} of ${RETRIES}"
                    oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc '/db2u/scripts/apply-db2cfg-settings.sh --setting all | tee /tmp/apply-db2cfg-settings.log' db2inst1
                    # no useful info in return code of this script

                    rc=0
                    mas-devops-db2-validate-config --mas-instance-id ${MAS_INSTANCE_ID} --mas-app-id ${MAS_APP_ID} --database-role standby --log-level DEBUG || rc=$?
                    if [[ "$rc" == "0" ]]; then
                      echo "...... configs applied successfully"
                      restart_hadr
                      return 0
                    fi

                    if [[ "${c}" -lt "${RETRIES}" ]]; then
                      echo "...... failed (rc: ${rc}), retry in ${RETRY_DELAY_SECONDS}s"
                      sleep $RETRY_DELAY_SECONDS
                    fi
                  done
                else
                  restart_hadr
                  return 0
                fi

                echo "...... failed, no attempts remain"
                return 1
              }

              function get_existing_hadr_config() {
                PRIMARY_HADR=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2pd -db bludb -hadr | egrep 'HADR_CONNECT_STATUS|HADR_STATE|HADR_ROLE' | cut -d'=' -f2 | tr -d ' '" db2inst1`
                PRIMARY_HADR_ARR=(${PRIMARY_HADR})
                PRIMARY_HADR_ROLE=${PRIMARY_HADR_ARR[0]}
                PRIMARY_HADR_STATE=${PRIMARY_HADR_ARR[1]}
                PRIMARY_HADR_STATUS=${PRIMARY_HADR_ARR[2]}
                PRIMARY_HADR_STATUS_TIME=${PRIMARY_HADR_ARR[3]}
                STANDBY_HADR=`oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2pd -db bludb -hadr | egrep 'HADR_CONNECT_STATUS|HADR_STATE|HADR_ROLE' | cut -d'=' -f2 | tr -d ' '" db2inst1`
                STANDBY_HADR_ARR=(${STANDBY_HADR})
                STANDBY_HADR_ROLE=${STANDBY_HADR_ARR[0]}
                STANDBY_HADR_STATE=${STANDBY_HADR_ARR[1]}
                STANDBY_HADR_STATUS=${STANDBY_HADR_ARR[2]}
                STANDBY_HADR_STATUS_TIME=${STANDBY_HADR_ARR[3]}

                echo ""
                echo "================================================================================"
                echo "Primary DB2 HADR config"
                echo "Primary HADR Role - ${PRIMARY_HADR_ROLE}"
                echo "Primary HADR State - ${PRIMARY_HADR_STATE}"
                echo "Primary HADR Connect Status - ${PRIMARY_HADR_STATUS}"
                echo "================================================================================"

                echo ""
                echo "================================================================================"
                echo "Standby DB2 HADR config"
                echo "Standby HADR Role - ${STANDBY_HADR_ROLE}"
                echo "Standby HADR State - ${STANDBY_HADR_STATE}"
                echo "Standby HADR Connect Status - ${STANDBY_HADR_STATUS}"
                echo "================================================================================"
              }

              PRIMARY_DB2_INSTANCE_NAME=${DB2_INSTANCE_NAME:0:-4}

              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${DB2_INSTANCE_NAME}-db2u-0 to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "pod" "c-${DB2_INSTANCE_NAME}-db2u-0" "${DB2_NAMESPACE}"

              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${DB2_INSTANCE_NAME}-db2u-0 to report Ready=True before continuing (timeout 300s)"
              echo "================================================================================"
              oc wait --for=condition=Ready pod/c-${DB2_INSTANCE_NAME}-db2u-0 --timeout 300s -n ${DB2_NAMESPACE}

              echo ""
              echo "================================================================================"
              echo "Waiting for service c-${DB2_INSTANCE_NAME}-db2u-engn-svc to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "svc" "c-${DB2_INSTANCE_NAME}-db2u-engn-svc" "${DB2_NAMESPACE}"

              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "pod" "c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0" "${DB2_NAMESPACE}"

              echo ""
              echo "================================================================================"
              echo "Waiting for pod c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 to report Ready=True before continuing (timeout 300s)"
              echo "================================================================================"
              oc wait --for=condition=Ready pod/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 --timeout 300s -n ${DB2_NAMESPACE}

              echo ""
              echo "================================================================================"
              echo "Waiting for service c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-engn-svc to be present before continuing (timeout 300s)"
              echo "================================================================================"
              wait_for_resource "svc" "c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-engn-svc" "${DB2_NAMESPACE}"


              # Get HADR ROLE and CONNECT STATUS for Primary and Standby
              get_existing_hadr_config

              # Always check standby and check if CONNECT STATUS is CONNECTED.
              # If disconnected, check if we can restart hadr config in both primary and standby. Validate the o/p.
              # If the state is still not CONnected, throw an error saying it needs to be manually resolved
              # Check if there is a way to copy the backup from primary to standby directly?

              is_backup_file_available='false'
              if [[ ! ($PRIMARY_ROLE == 'PRIMARY' && $STANDBY_ROLE == 'STANDBY' && STANDBY_HADR_STATE == 'CONNECTED') ]]; then

                # If for some reason HADR got disconnected
                if [[ $STANDBY_ROLE == 'STANDBY' && STANDBY_HADR_STATE == 'DISCONNECTED' ]]; then
                  echo "HADR is in DISCONNECTED state. Trying to restart the HADR service"
                  restart_hadr
                  # validate the configs in primary and standby again
                  get_existing_hadr_config
                  if [[ $PRIMARY_ROLE == 'PRIMARY' && $STANDBY_ROLE == 'STANDBY' && STANDBY_HADR_STATE == 'CONNECTED' ]]; then
                    echo "HADR services are restored"
                    exit 0
                  else
                    echo "HADR services are not restored. Kindly check"
                    exit 1
                  fi
                fi

                echo "Checking if a backup already exists on ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0"
                is_backup_log_available=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "if [ -f /mnt/backup/standby/dbbackup.log ]; then echo 'true'; else echo 'false'; fi"`
                if [[ $is_backup_log_available == 'true' ]]; then
                  timestamp=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "cat /mnt/backup/standby/dbbackup.log | grep 'timestamp' | rev | cut -d ' ' -f1 | rev" db2inst1`
                  echo "timestamp - $timestamp"
                  backup_filename=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "ls /mnt/backup/standby | grep ${timestamp}" db2inst1`
                  echo "backup_filename - $backup_filename"
                  if [[ ${timestamp:0:8} == `date +%Y%m%d` ]]; then
                    is_backup_file_available=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "if [ -f /mnt/backup/standby/$backup_filename ]; then echo 'true'; else echo 'false'; fi"`
                  fi
                fi

                if [[ $is_backup_file_available == 'false' ]]; then
                  echo ""
                  echo "Taking backup on ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0"
                  echo "--------------------------------------------------------------------------------"
                  oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "mkdir -p /mnt/backup/standby; db2 backup db ${DB2_DBNAME} on all dbpartitionnums online to /mnt/backup/standby | tee /mnt/backup/standby/dbbackup.log" db2inst1 || exit $?
                  echo ""
                  timestamp=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "cat /mnt/backup/standby/dbbackup.log | grep 'timestamp' | rev | cut -d ' ' -f1 | rev" db2inst1`
                  echo "Timestamp of backup is ${timestamp}"

                  backup_filename=`oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "ls /mnt/backup/standby | grep ${timestamp}" db2inst1`
                  echo "Backup filename is ${backup_filename}"
                else
                  echo "Backup is already available in primary. Hence skipping"
                fi

                echo "Checking if backup file was copied already to standby c-${DB2_INSTANCE_NAME}-db2u-0"
                is_backup_copied=`oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "if [ -f /tmp/${backup_filename} ]; then echo 'true'; else echo 'false'; fi"`
                if [[ $is_backup_copied == 'true' ]]; then
                  echo "Earlier copied backup is available in standby. Validating the backup file"
                  rc=0
                  bkp_validation=`oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2ckbkp -h /tmp/${backup_filename};" db2inst1`
                  echo $bkp_validation
                  if [[ $bkp_validation == *"ERROR"* ]]; then
                    echo "The earlier copied backup is not a valid image."
                    rc=1
                  else
                    echo "The earlier copied backup is a valid image"
                  fi
                fi

                if [[ $rc != 0 || $is_backup_copied == 'false' ]]; then
                  echo ""
                  echo "Copying backup /mnt/backup/standby/${backup_filename} from ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 to ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0 "
                  # check if cos bucket is configured.
                  # if available, use that to transfer backup image to standby
                  # else copy using oc copy
                  if [[ ${DB2_BACKUP_INSTALL} == 'true' ]]; then

                    # Reading source props
                    PROPS=oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "cat /mnt/backup/bin/.PROPS | egrep 'SERVER|PARM1|PARM2|CONTAINER' | grep -v '#'" db2inst1 || exit $?
                    SERVER=`echo ${PROPS} | grep SERVER | cut -d'=' -f2 | tr -d ' '`
                    PARM1=`echo ${PROPS} | grep PARM1 | cut -d'=' -f2 | tr -d ' '`
                    PARM2=`echo ${PROPS} | grep PARM2 | cut -d'=' -f2 | tr -d ' '`
                    CONTAINER=`echo ${PROPS} | grep CONTAINER | cut -d'=' -f2 | tr -d ' '`

                    # copy backup from primary to cos bucket
                    SOURCE=/mnt/backup/standby/${backup_filename}
                    TARGET=backups-manage/${HOSTNAME}/copy-to-standby/${backup_filename}

                    DB2V=oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2level | grep Inform | awk '{print $5}' | sed 's/\",//'" db2inst1 || exit $?
                    echo "DB2 version is ${DB2V}"
                    if [ ${DB2V} = "v11.5.7.0" ] #MAYBE REMOVED. I HOPE THIS VERSION IS NOT INSTALLED IN DB2
                    then
                      oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc ". /mnt/backup/bin/.PROPS;db2RemStgManager S3 put server=${SERVER} auth1=${PARM1} auth2=${PARM2} container=${CONTAINER} source=${SOURCE} target=${TARGET}" db2inst1 || exit $?
                    else
                      oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc ". /mnt/backup/bin/.PROPS;db2RemStgManager ALIAS PUT source=${SOURCE} target=DB2REMOTE://AWSCOS//${TARGET} | tee /tmp/backupupload.log" db2inst1 || exit $?
                    fi

                    # copy backup from cos bucket to standby
                    storage_access=oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2 list storage access" db2inst1 || exit $?
                    if echo ${storage_access} | grep PRIMARYCOS; then
                        echo "PRIMARYCOS is available already."
                        oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2 uncatalog storage access alias PRIMARYCOS" db2inst1 || exit $?
                    else
                        echo "PRIMARYCOS is not available. Creating"
                        oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2 catalog storage access alias PRIMARYCOS VENDOR S3 server ${SERVER} user ${PARM1} password ${PARM2} container ${CONTAINER} | tee /tmp/storageaccess.log" db2inst1 || exit $?
                    fi

                    oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "mkdir -p /mnt/backup/primary-backup; db2RemStgManager ALIAS GET source=DB2REMOTE://PRIMARYCOS//${TARGET} target=/mnt/backup/primary-backup/${backup_filename} | tee /tmp/backupdownload.log" db2inst1 || exit $?


                  else
                    oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "cp /mnt/backup/standby/${backup_filename} /tmp; chmod 777 /tmp/${backup_filename}" db2inst1 || exit $?
                    oc cp ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0:/tmp/${backup_filename} /tmp/${backup_filename}
                    oc cp /tmp/${backup_filename} ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:/tmp/${backup_filename}
                  fi
                fi

                echo ""
                echo "Copying keystore from primary to standby"
                KEYSTORE_GENERATION_SCRIPT='/tmp/keystore_generation.sh'

                cat > ${KEYSTORE_GENERATION_SCRIPT} << EOF
                  #!/bin/bash
                  db2 connect to ${DB2_DBNAME};
                  if [ \$? != 0 ]; then
                    echo "Failed to connect to database!"
                    exit 1
                  fi
                  label=\$(db2 -x "select MASTER_KEY_LABEL from TABLE(SYSPROC.ADMIN_GET_ENCRYPTION_INFO()) where OBJECT_NAME='${DB2_DBNAME}' and OBJECT_TYPE='DATABASE'")
                  gsk8capicmd_64 -cert -export -db /mnt/blumeta0/db2/keystore/keystore.p12  -stashed -label ${label} -target /mnt/blumeta0/home/db2inst1/migrate_hadr.p12 -target_pw 'CDS0n&Up'

              EOF

                chmod +x ${KEYSTORE_GENERATION_SCRIPT}
                echo ""
                echo "Copy ${KEYSTORE_GENERATION_SCRIPT} to ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc cp ${KEYSTORE_GENERATION_SCRIPT} ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0:${KEYSTORE_GENERATION_SCRIPT} -c db2u || exit $?

                echo ""
                echo "Executing ${KEYSTORE_GENERATION_SCRIPT} file on ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "${KEYSTORE_GENERATION_SCRIPT} | tee /tmp/keystoregeneration.log" db2inst1 || exit $?
                oc exec -n ${DB2_NAMESPACE} c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0 -- su -lc "mkdir -p /tmp/keystore; cp /mnt/blumeta0/home/db2inst1/migrate_hadr.p12 /tmp/keystore; chmod -R 777 /tmp/keystore" db2inst1 || exit $?
                oc rsync ${DB2_NAMESPACE}/c-${PRIMARY_DB2_INSTANCE_NAME}-db2u-0:/tmp/keystore /tmp
                oc rsync /tmp/keystore ${DB2_NAMESPACE}/c-${DB2_INSTANCE_NAME}-db2u-0:/tmp
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "gsk8capicmd_64 -cert -import -db /tmp/keystore/migrate_hadr.p12 -pw 'CDS0n&Up' -target /mnt/blumeta0/db2/keystore/keystore.p12 -target_stashed" db2inst1 || exit $?

                # Restore in standby
                echo ""
                echo "Restoring ${timestamp} in standby server"
                echo "--------------------------------------------------------------------------------"
                oc exec -n ${DB2_NAMESPACE} c-${DB2_INSTANCE_NAME}-db2u-0 -- su -lc "db2 force applications all; db2 terminate; db2 deactivate db ${DB2_DBNAME}; db2 drop db ${DB2_DBNAME}; db2 restore db ${DB2_DBNAME} from /tmp taken at ${timestamp} with 15 buffers buffer 4096 parallelism 15 encrypt without prompting" db2inst1 || exit $?
              else
                echo "HADR is already setup. Hence skipping the restore on standby"
              fi

              echo ""
              echo "================================================================================"
              echo "Calling apply-db2cfg-settings.sh file on c-${DB2_INSTANCE_NAME}-db2u-0"
              echo "================================================================================"
              db2apply ${PRIMARY_ROLE} ${STANDBY_ROLE}  || exit $?

{{ end }}