{{- /*
  Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "dbs-rds-postsync-setup" }}

{{- /*
  Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
  Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:aa3972d1777c01a86ab21a47854f1f5fbffc09452adfb0c734e245b3d46e6ffb" }}

{{- /*
  A dict of values that influence the behaviour of the job in some way.
  Any changes to values in this dict will trigger a rerun of the job.
  Since jobs must be idemopotent, it's generally safe to pass in values here that are not
  strictly necessary (i.e. including some values that don't actually influence job behaviour).
  We may want to refine this further though for jobs that can take a long time to complete.
  Included in $_job_hash (see below).
  */}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
  Increment this value whenever you make a change to an immutable field of the Job resource.
  E.g. passing in a new environment variable.
  Included in $_job_hash (see below).
  */}}
{{- $_job_version := "v1" }}

{{- /*
  10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
  This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
  immutable field of any existing Job resource.
  */}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash ) }}

{{- /*
  Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.
  
  When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label
  to identify old Job resources that should be pruned on behalf of ArgoCD.
  
  Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
  will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
  Jobs will be automatically deleted.
  
  $_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
  where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
  must be added to $_job_cleanup_group.
  NOTE: this is one of those cases; we need a separate cleanup group for each DB2 database
  
  By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
  are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix .Values.db2_instance_name | sha1sum }}

---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: dbs-rds-secret-store
  annotations:
    argocd.argoproj.io/sync-wave: "136"
data:
  username: {{ .Values.user | quote | b64enc }}
  password: {{ .Values.password | quote | b64enc }}


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  annotations:
    argocd.argoproj.io/sync-wave: "136"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  backoffLimit: 10
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: dbs-rds-init
          image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              pip install ibm_db && \
              python /etc/mas/dbs-rds-init-script/dbs-rds-init.py
          env:
            - name: MAS_APP_ID
              value: {{ .Values.mas_application_id | quote }}
            - name: DB_HOST
              value: {{ .Values.host | quote }}
            - name: RDS_ADMIN_DB
              value: {{ .Values.rds_admin_db_name | quote }}
            - name: DB_PORT
              value: "50000"
            - name: DB_NAME
              value: {{ .Values.dbname | quote }}
          volumeMounts:
            - name: dbs-rds-secret-store
              mountPath: /etc/mas/dbs-rds-creds/
            - name: dbs-rds-init-script
              mountPath: /etc/mas/dbs-rds-init-script/
      restartPolicy: Never
      volumes:
        - name: dbs-rds-init-script
          configMap:
            name: {{ .Values.scriptConfigMapName | quote }}
        - name: dbs-rds-secret-store
          secret:
            secretName: dbs-rds-secret-store
            defaultMode: 420
            optional: false

