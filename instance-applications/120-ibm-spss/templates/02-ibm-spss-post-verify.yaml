{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "cpd-spss-post-verify-job" }}

{{- /*
Use the build/bin/set-cli-image-digest.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_digest := "sha256:1b88f88a1a719d006ea1f4b8dcfd1c2625fa7ecc529c3267e7b4b6afaa1c8da0" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v2" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_digest
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_digest $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}

{{- /*
Set as the value for the mas.ibm.com/job-cleanup-group label on the Job resource.

When the auto_delete flag is not set on the root application, a CronJob in the cluster uses this label 
to identify old Job resources that should be pruned on behalf of ArgoCD.

Any Job resources in the same namespace that have the mas.ibm.com/job-cleanup-group with this value
will be considered to belong to the same cleanup group. All but the most recent (i.e. with the latest "creation_timestamp")
Jobs will be automatically deleted.

$_job_cleanup_group can usually just be based on $_job_name_prefix. There are some special cases
where multiple Jobs are created in our templates using a Helm loop. In those cases, additional descriminators
must be added to $_job_cleanup_group.

By convention, we sha1sum this value to guarantee we never exceed the 63 char limit regardless of which discriminators
are required here.

*/}}
{{- $_job_cleanup_group := cat $_job_name_prefix | sha1sum }}

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: spss-postcheck-sa
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "094"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spss-postcheck-role-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "094"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - verbs:
      - get
      - list
      - patch
      - update
    apiGroups:
      - ''
      - zen.cpd.ibm.com
      - cpd.ibm.com
      - operator.ibm.com
      - apiextensions.k8s.io
      - ccs.cpd.ibm.com
      - elasticsearch.opencontent.ibm.com
      - ws.cpd.ibm.com
    resources:
      - ibmcpds
      - zenservices
      - secrets
      - commonservices
      - customresourcedefinitions
      - ccs
      - elasticsearchclusters
      - ws
      - serviceaccounts
  - verbs:
      - get
      - list
      - scale
      - patch
    apiGroups:
      - apps
    resources:
      - deployments
      - deployments/scale
  - verbs:
      - delete
      - list
    apiGroups:
      - batch
      - apps
    resources:
      - jobs
      - statefulsets

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spss-postcheck-rb-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "095"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: spss-postcheck-sa
    namespace: "{{ .Values.cpd_operators_namespace }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spss-postcheck-role-{{ .Values.instance_id }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "096"
  labels:
    mas.ibm.com/job-cleanup-group: {{ $_job_cleanup_group }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli@{{ $_cli_image_digest }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: CPD_INSTANCE_NAMESPACE
              value: {{ .Values.cpd_instance_namespace }}
            - name: CPD_OPERATORS_NAMESPACE
              value: {{ .Values.cpd_operators_namespace }}
            - name: CPD_SERVICE_STORAGE_CLASS
              value: {{ .Values.cpd_service_storage_class }}
            - name: CPD_SERVICE_BLOCK_STORAGE_CLASS
              value: {{ .Values.cpd_service_block_storage_class }}
          command:
            - /bin/sh
            - -c
            - |

              set -e
              echo
              echo "================================================================================"
              echo "Waiting for SPSS and its dependencies to be complete"
              echo "Wait for CCS Cr to be ready and patch if needed"
              echo "================================================================================"
              echo
              
              echo
              echo "Waiting for ccs-cr to be ready..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1800 ]; then
                  echo "ccs-cr is not ready after 30 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                CCS_CR_LOOKUP=$(oc get CCS ccs-cr -n $CPD_INSTANCE_NAMESPACE --ignore-not-found)
                if [[ ! -z $CCS_CR_LOOKUP ]]; then
                  echo "CCS Cr is available"
                  break
                fi
              done

              echo "Patching CCS ccs-cr if not already patched"
              CCS_COUCHDB_RES=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.couchdb_resources}')
              CCS_BLOCKSTORAGE=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.blockStorageClass}')
              CCS_IMAGEPULLSECRET=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.imagePullSecret}')

              if [[ -z $CCS_COUCHDB_RES || -z $CCS_BLOCKSTORAGE || -z $CCS_IMAGEPULLSECRET ]]; then
                echo "CCS CR needs to be patched"
                echo "patching CCS Cr..."
                oc patch --type='merge' CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -p "{\"spec\":{ \"imagePullSecret\":\"ibm-entitlement-key\",\"blockStorageClass\":\"$CPD_SERVICE_BLOCK_STORAGE_CLASS\",\"fileStorageClass\":\"$CPD_SERVICE_STORAGE_CLASS\",\"couchdb_resources\":{ \"limits\":{ \"cpu\":\"16\",\"memory\":\"16Gi\"},\"requests\":{ \"cpu\":\"3\",\"memory\":\"256Mi\"},\"couchdb_search_resources\":{ \"limits\":{ \"cpu\":\"4\",\"memory\":\"6Gi\"},\"requests\":{ \"cpu\":\"250m\",\"memory\":\"256Mi\"}}}}}"
                echo "scaling CCS operator down and up to force reconcile when the pod is restarted"
                oc scale deployment ibm-cpd-ccs-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=0
                oc scale deployment ibm-cpd-ccs-operator -n ${CPD_OPERATORS_NAMESPACE} --replicas=1
              fi

              echo
              echo "Waiting for ibm-cpd-ccs-operator to be ready again..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1200 ]; then
                  echo "CCS operator is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                CCS_OPERATOR_LOOKUP=$(oc get deployment ibm-cpd-ccs-operator -n $CPD_OPERATORS_NAMESPACE --ignore-not-found -ojsonpath='{.status.availableReplicas}')
                if [[ ! -z $CCS_OPERATOR_LOOKUP ]]; then
                  echo "CCS Operator is ready again"
                  break
                fi
              done

              echo
              echo "================================================================================"
              echo "Wait for Elastic Search to be ready and patch if needed before checking ccsStatus"
              echo "================================================================================"
              echo

              echo
              echo "Waiting for elasticsearch-master to be ready..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1800 ]; then
                  echo "elasticsearch-master is not ready after 30 minutes of waiting. Exiting..."
                  exit 1
                else
                  sleep 60
                fi

                ELASTICSEARCH_CR_LOOKUP=$(oc get ElasticsearchCluster elasticsearch-master -n $CPD_INSTANCE_NAMESPACE --ignore-not-found)
                if [[ ! -z $ELASTICSEARCH_CR_LOOKUP ]]; then
                  echo "Elasticsearch Cr is available"
                  break
                fi
              done

              echo "Patching ElasticsearchCluster elasticsearch-master if not already patched"

              ELASTICSEARCH_IMAGEPULLSECRET=$(oc get ElasticsearchCluster elasticsearch-master -n ${CPD_INSTANCE_NAMESPACE} -ojsonpath='{.spec.imagePullSecret}')

              if [[ -z $ELASTICSEARCH_IMAGEPULLSECRET ]]; then
                echo "elasticsearch-master needs to be patched"
                echo "patching elasticsearch-master and forcing reconcile..."
                oc scale deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n ${CPD_OPERATORS_NAMESPACE} --replicas=0
                oc delete Job elasticsearch-master-ibm-elasticsearch-create-snapshot-repo-job -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found
                oc delete StatefulSet -n ${CPD_INSTANCE_NAMESPACE} --selector="app.kubernetes.io/instance=elasticsearch-master" --ignore-not-found
                oc patch --type='merge' ElasticsearchCluster elasticsearch-master -n ${CPD_INSTANCE_NAMESPACE} -p "{\"spec\":{ \"imagePullSecret\":\"ibm-entitlement-key\"}}"
                oc scale deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n ${CPD_OPERATORS_NAMESPACE} --replicas=1
              fi

              echo
              echo "Waiting for ibm-elasticsearch-operator to be ready again..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 1200 ]; then
                  echo "Elasticsearch operator is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi

                ELASTICSEARCH_OPERATOR_LOOKUP=$(oc get deployment ibm-elasticsearch-operator-ibm-es-controller-manager -n $CPD_OPERATORS_NAMESPACE --ignore-not-found -ojsonpath='{.status.availableReplicas}')
                if [[ ! -z $ELASTICSEARCH_OPERATOR_LOOKUP ]]; then
                  echo "Elasticsearch Operator is ready again"
                  break
                fi
              done

              echo
              echo "================================================================================"
              echo "Back to CCS"
              echo "================================================================================"
              echo
              echo "Waiting for ccsStatus to be 'Completed'..."

              wait_period=0
              while true; do
                wait_period=$(($wait_period+300))
                if [ $wait_period -gt 15000 ]; then
                  echo "ccsStatus is not complete after 4 hours and 10 minutes of waiting. Exiting..."
                  exit 1
                else
                  sleep 300
                fi

                CCSSTATUS_LOOKUP=$(oc get CCS ccs-cr -n ${CPD_INSTANCE_NAMESPACE} -o jsonpath='{.status.ccsStatus}')
                if [[ ! -z ${CCSSTATUS_LOOKUP} && ${CCSSTATUS_LOOKUP} == *"Completed"* ]]; then
                  echo "CCS is complete"
                  break
                fi
              done


      restartPolicy: Never
      serviceAccountName: spss-postcheck-sa
  backoffLimit: 4


