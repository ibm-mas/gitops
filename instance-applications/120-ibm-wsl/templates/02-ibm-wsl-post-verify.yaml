---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: wsl-precheck-sa
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "092"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: wsl-precheck-role-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "092"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - verbs:
      - get
      - list
    apiGroups:
      - ''
      - zen.cpd.ibm.com
    resources:
      - zenservices
      - secrets

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: wsl-precheck-rb-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "093"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: wsl-precheck-sa
    namespace: "{{ .Values.cpd_operators_namespace }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: wsl-precheck-role-{{ .Values.instance_id }}

---
kind: Secret
apiVersion: v1
metadata:
  name: aws
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "093"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
stringData:
  aws_access_key_id: {{ .Values.sm_aws_access_key_id }}
  aws_secret_access_key: {{ .Values.sm_aws_secret_access_key }}
type: Opaque

---
apiVersion: batch/v1
kind: Job
metadata:
  name: cpd-wsl-post-verify-v2-{{ omit .Values "junitreporter" | toYaml | adler32sum }}
  namespace: "{{ .Values.cpd_operators_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "094"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
{{- if .Values.custom_labels }}
    metadata:
      labels:
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: CPD_INSTANCE_NAMESPACE
              value: {{ .Values.cpd_instance_namespace }}
            - name: ACCOUNT_ID
              value: {{ .Values.account_id }}
            - name: REGION_ID
              value: {{ .Values.region_id }}
            - name: CLUSTER_ID
              value: {{ .Values.cluster_id }}
            - name: INSTANCE_ID
              value: {{ .Values.instance_id }}
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
          volumeMounts:
            - name: aws
              mountPath: /etc/mas/creds/aws
          command:
            - /bin/sh
            - -c
            - |

              set -e
              echo 
              echo "================================================================================"
              echo "Getting WSL Project ID for Predict"
              echo "================================================================================"
              echo "Lookup Cloud Pak for Data admin username"
              USERNAME=$(oc get secret ibm-iam-bindinfo-platform-auth-idp-credentials -n ${CPD_INSTANCE_NAMESPACE} --ignore-not-found -o json | jq -r '.data.admin_username' | base64 -d)

              if [[ -z ${USERNAME} ]]; then
                export CPD_ADMIN_USERNAME="admin"
                export SECRET_NAME="admin-user-details"
                export ADMIN_PASSWORD_PROPERTY="initial_admin_password"

              else
                export CPD_ADMIN_USERNAME="cpadmin"
                export SECRET_NAME="ibm-iam-bindinfo-platform-auth-idp-credentials"
                export ADMIN_PASSWORD_PROPERTY="admin_password"
              fi
              
              
              echo 
              echo "Lookup Cloud Pak for Data admin password"
              CPD_ADMIN_PASSWORD=$(oc get secret $SECRET_NAME -n ${CPD_INSTANCE_NAMESPACE} -o json | jq -r ".data.${ADMIN_PASSWORD_PROPERTY}" | base64 -d)

              echo 
              echo "Lookup Cloud Pak for Data admin url"
              URL=$(oc get ZenService lite-cr -o jsonpath="{.status.url}{'\n'}" -n ${CPD_INSTANCE_NAMESPACE})

              if [[ -z ${URL} || -z ${CPD_ADMIN_USERNAME} || -z ${CPD_ADMIN_PASSWORD} ]]; then
                echo "CPD admin username/password/url details are missing, please check your Cloud Pak For Data instance health!"
                exit 1
              fi

              CPD_ADMIN_URL="https://${URL}"

              echo 
              echo "================================================================================"
              echo "Debug Cloud Pak for Data Admin details"
              echo "================================================================================"
              echo "- CP4D Dashboard ......................... ${CPD_ADMIN_URL}"
              echo "- CP4D Admin Username .................... ${CPD_ADMIN_USERNAME}"
              echo "- CP4D Admin Password .................... ${CPD_ADMIN_PASSWORD:0:2}<snip>"

              CPD_WSL_PROJECT_NAME=wsl-mas-${INSTANCE_ID}-predict

              echo "- CP4D WSL Project Name .................. ${CPD_WSL_PROJECT_NAME}"
              echo 

              echo "Authorize CP4D Admin and get bearer token"
              echo "================================================================================"
              CPD_BEARER_TOKEN=$(curl -k -X POST --location "${CPD_ADMIN_URL}/icp4d-api/v1/authorize" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"username\":\"$CPD_ADMIN_USERNAME\",\"password\":\"$CPD_ADMIN_PASSWORD\"}" | jq -r '.token')

              echo "Check if a project with the name ${CPD_WSL_PROJECT_NAME} exists"
              echo "================================================================================"
              curl -k -X GET --location "${CPD_ADMIN_URL}/v2/projects" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" -o projectlist.json
              WSL_PROJECT_ID=$(cat projectlist.json | jq -r --arg pn "$CPD_WSL_PROJECT_NAME" '.resources[] | select(.entity.name==$pn) | .metadata.guid')
              

              if [[ -z ${WSL_PROJECT_ID} ]]; then
                CPD_WSL_PROJECT_DESCRIPTION="Watson Studio Project for Maximo Application Suite"
                CPD_WSL_PROJECT_STORAGE_GUID=$(uuidgen -r)
                echo
                echo "Project ${CPD_WSL_PROJECT_NAME} does not exist in the project list. A new project will be created."
                echo "================================================================================"
                echo "- Project Name ......................... ${CPD_WSL_PROJECT_NAME}"
                echo "- Project Description .................. ${CPD_WSL_PROJECT_DESCRIPTION}"
                echo "- Project Storage Guid ................. ${CPD_WSL_PROJECT_STORAGE_GUID}"
                
                echo "Check that the cpd admin user has permission to create projects"
                echo "================================================================================"
                curl -k -X PUT --location "${CPD_ADMIN_URL}/usermgmt/v1/role/zen_administrator_role" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"role_name\":\"Administrator\",\"description\":\"Administrator role\",\"permissions\":[\"administrator\",\"can_provision\",\"manage_catalog\",\"create_space\",\"create_project\"]}"

                echo
                echo "Creating a new project..."
                WSL_PROJECT_ID=$(curl -k -X POST --location "${CPD_ADMIN_URL}/transactional/v2/projects" --header "Authorization:Bearer ${CPD_BEARER_TOKEN}" --header "Cache-Control:no-cache" --header "Content-Type:application/json" --data "{\"name\":\"$CPD_WSL_PROJECT_NAME\",\"description\":\"$CPD_WSL_PROJECT_DESCRIPTION\",\"generator\":\"cp4d-$CPD_ADMIN_USERNAME\",\"public\":false,\"storage\":{ \"type\":\"assetfiles\",\"guid\":\"$CPD_WSL_PROJECT_STORAGE_GUID\"}}" | jq -r '.location | split ("/") | last')
              else
                echo "Project named ${CPD_WSL_PROJECT_NAME} already exists and has been found"
              fi

              echo "================================================================================"  
              echo "- WSL Project Id ............................. ${WSL_PROJECT_ID}"
              echo "Writing WSL Project ID into Secret Manager for use by Predict"

              source /mascli/functions/gitops_utils
              # NOTE: cannot just render AWS secrets into here, as it will be exposed in the ArgoCD UI
              # Instead, we pass them into a secret (ArgoCD knows to hide any data fields in k8s secrets),
              # mount the secret on the jobs filesystem, and read them in here
              SM_AWS_ACCESS_KEY_ID=$(cat /etc/mas/creds/aws/aws_access_key_id)
              SM_AWS_SECRET_ACCESS_KEY=$(cat /etc/mas/creds/aws/aws_secret_access_key)
              export SM_AWS_REGION=${REGION_ID}
              sm_login

              SECRET_NAME_WSL_PROJECT_ID=${ACCOUNT_ID}/${CLUSTER_ID}/${INSTANCE_ID}/$CPD_WSL_PROJECT_NAME
              TAGS="[{\"Key\": \"source\", \"Value\": \"cpd-wsl-post-verify\"}, {\"Key\": \"account\", \"Value\": \"${ACCOUNT_ID}\"}, {\"Key\": \"cluster\", \"Value\": \"${CLUSTER_ID}\"}]"
              sm_update_secret $SECRET_NAME_WSL_PROJECT_ID "{\"wsl_project_id\": \"$WSL_PROJECT_ID\" }" "${TAGS}"

              SECRET_NAME_WATSON_STUDIO=${ACCOUNT_ID}/${CLUSTER_ID}/${INSTANCE_ID}/wsl-cp4d
              sm_update_secret $SECRET_NAME_WATSON_STUDIO "{\"url\": \"$CPD_ADMIN_URL\", \"username\": \"$CPD_ADMIN_USERNAME\", \"password\": \"$CPD_ADMIN_PASSWORD\" }" "${TAGS}"

              echo "Done"

      restartPolicy: Never
      serviceAccountName: wsl-precheck-sa
      volumes:
        - name: aws
          secret:
            secretName: aws
            defaultMode: 420
            optional: false
  backoffLimit: 4
