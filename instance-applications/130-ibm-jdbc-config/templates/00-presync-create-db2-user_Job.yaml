{{- if eq .Values.jdbc_type "incluster-db2" }}


{{ $ns := printf "mas-%s-core" .Values.instance_id }}
{{ $prefix := printf "pre-jdbc-usr-%s" .Values.mas_config_name }}
{{ $secret := printf "%s-creds" $prefix }}
{{ $sa := printf "%s-sa" $prefix }}
{{ $crole := printf "%s-crole" $prefix }}
{{ $crb := printf "%s-crb" $prefix }}
{{ $np := printf "%s-np" $prefix }}
{{ $job := printf "%s-job" $prefix }}

---

# We need to embed the supplied JDBC creds in a K8S secret so we can safely access them from
# the Job without exposing them via the ArgoCD resources
# NOTE: do not want to use the actual usersupplied jdbc creds secret as I'd have to annotate that
# to be a presync hook which will cause ArgoCD to delete it and could cause problems; safer just to create a dedicated secret for the presync hook.
# (alternatively could look up the secret via SM in the Job script but it's better this way as we use the actual credentials set in the chart values)
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $secret }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
stringData:
  username: "{{ .Values.jdbc_instance_username }}"
  password: "{{ .Values.jdbc_instance_password }}"

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ $sa }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}



---
# Needed for "oc get crd db2uclusters.db2u.databases.ibm.com" command
# and for accessing resources in the db2u namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ $crole }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
- apiGroups: 
    - apiextensions.k8s.io
  resources: 
    - customresourcedefinitions
  verbs: 
    - get
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - list
    - get
- apiGroups:
    - ""
  resources: 
    - pods/exec
  verbs: 
    - create
- apiGroups:
    - db2u.databases.ibm.com
  resources: 
    - db2uengines
  verbs: 
    - get

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $crb }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: {{ $sa }}
    namespace: {{ $ns }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $crole }}



---

# Permit outbound communication by the Job pods
# (Needed to communicate with the K8S HTTP API and AWS SM)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $np }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job }}
  egress:
    - {}
  policyTypes:
    - Egress


---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $job }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          # TODO: use a dedicated image with a smaller footprint for this sort of thing?
          # Just using cli for now since it has all the deps we need to talk with AWS SM
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: DB2_NAMESPACE
              value: "{{ .Values.db2_namespace }}"
            - name: DB2_INSTANCE_NAME
              value: "{{ .Values.jdbc_instance_name }}"
            - name: DB2_DBNAME
              value: "{{ .Values.db2_dbname }}"
          volumeMounts:
            - name: db2-credentials
              mountPath: /etc/mas/creds/db2-credentials
          command:
            - /bin/sh
            - -c
            - |

              set -e

              source /mascli/functions/gitops_utils

              export DB2_CREDENTIALS_SECRET_PATH="/etc/mas/creds/db2-credentials"

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "DB2_NAMESPACE ....................... ${DB2_NAMESPACE}"
              echo "DB2_INSTANCE_NAME ................... ${DB2_INSTANCE_NAME}"
              echo "DB2_DBNAME .......................... ${DB2_DBNAME}"
              echo "DB2_CREDENTIALS_SECRET_PATH ......... ${DB2_CREDENTIALS_SECRET_PATH}"

              echo ""
              echo "================================================================================"
              echo "Checking DB2 CRD db2uclusters.db2u.databases.ibm.com is ready (retries every ~10 seconds for ~5 minutes)"
              echo "================================================================================"

              # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True STARTS  
              wait_period=0
              while true; do
                export DB2_CRD_NAMES_ACCEPTED_STATUS=$(oc get crd db2uclusters.db2u.databases.ibm.com -o=jsonpath="{.status.conditions[?(@.type=='NamesAccepted')].status}")
                echo "DB2_CRD_NAMES_ACCEPTED_STATUS .... ${DB2_CRD_NAMES_ACCEPTED_STATUS}"
                if [[ "$DB2_CRD_NAMES_ACCEPTED_STATUS" == "True" ]]; then
                  break
                fi

                wait_period=$(($wait_period+10))
                if [ $wait_period -gt 300 ];then
                  echo "CRD db2uclusters.db2u.databases.ibm.com is not ready with in 300 sec, exiting"
                  exit 1
                else
                  echo "CRD db2uclusters.db2u.databases.ibm.com is not ready, trying again in 10 seconds"
                  sleep 10
                fi
              done  
              # wait till CRD db2uclusters.db2u.databases.ibm.com NamesAccepted=True DONE

              echo ""
              echo "================================================================================"
              echo "Reading LDAP credentials from ${DB2_CREDENTIALS_SECRET_PATH}"
              echo "================================================================================"
              export DB2_LDAP_USERNAME=$(cat /etc/mas/creds/db2-credentials/username)
              export DB2_LDAP_PASSWORD=$(cat /etc/mas/creds/db2-credentials/password)

              echo ""
              echo "================================================================================"
              echo "Checking if ${DB2_LDAP_USERNAME} user exists already"
              echo "================================================================================"
              
              echo ""
              echo "Looking up name of DB2 db2u pod"
              echo "--------------------------------------------------------------------------------"
              export DB2_DB2U_POD_NAME=$(oc get pods -o custom-columns=POD:.metadata.name -l app=${DB2_INSTANCE_NAME},role=db -n ${DB2_NAMESPACE}  --no-headers)
              if [[ -z "${DB2_DB2U_POD_NAME}" ]]; then
                echo "Failed to look up DB2 db2u pod name"
                exit 1
              fi
              echo "DB2_DB2U_POD_NAME .......................... ${DB2_DB2U_POD_NAME}"


              echo ""
              echo "Executing command on DB2 db2u pod; su -lc \"id ${DB2_LDAP_USERNAME}\""
              echo "--------------------------------------------------------------------------------"
              # Using the || syntax to avoid surfacing a non 0 rc and exitting the job (without having to disable set -e)
              DB2_USER_FOUND=true
              oc exec -it -n ${DB2_NAMESPACE} ${DB2_DB2U_POD_NAME} -- su -lc "id ${DB2_LDAP_USERNAME}" || DB2_USER_FOUND=false
              if [[ "${DB2_USER_FOUND}" == "true" ]]; then
                echo "DB2 user exists already, exiting now"
                exit 0
              fi
              echo "DB2 user does not exist yet"

              echo ""
              echo "================================================================================"
              echo "Creating user ${DB2_LDAP_USERNAME}"
              echo "================================================================================"

              echo ""
              echo "Looking up name of DB2 LDAP pod"
              echo "--------------------------------------------------------------------------------"
              export DB2_LDAP_POD_NAME=$(oc get pods -o custom-columns=POD:.metadata.name -l app=${DB2_INSTANCE_NAME},role=ldap -n ${DB2_NAMESPACE}  --no-headers)
              if [[ -z "${DB2_LDAP_POD_NAME}" ]]; then
                echo "Failed to look up DB2 LDAP pod name"
                exit 1
              fi
              echo "DB2_LDAP_POD_NAME .......................... ${DB2_LDAP_POD_NAME}"


              echo ""
              echo "Executing addLdapUser.py script in ${DB2_LDAP_POD_NAME} pod"
              echo "--------------------------------------------------------------------------------"
              oc exec -it -n ${DB2_NAMESPACE} ${DB2_LDAP_POD_NAME} -- /opt/ibm/ldap_scripts/addLdapUser.py -u ${DB2_LDAP_USERNAME} -r admin -p ${DB2_LDAP_PASSWORD}
              echo "..... rc $?"

              echo ""
              echo "Verifying that ${DB2_LDAP_USERNAME} can authenticate with ${DB2_DBNAME} database (retries every ~10 seconds for max ~5 minutes)"
              echo "--------------------------------------------------------------------------------"
              wait_period=0
              while true; do

                # Using the || syntax to avoid surfacing a non 0 rc and exitting the job (without having to disable set -e)
                AUTH_SUCCESS=true
                oc exec -it c-${DB2_INSTANCE_NAME}-db2u-0 -n ${DB2_NAMESPACE} -c db2u -- su -lc "db2 connect to ${DB2_DBNAME} user ${DB2_LDAP_USERNAME} using ${DB2_LDAP_PASSWORD}" db2inst1 || AUTH_SUCCESS=false
                if [[ "${AUTH_SUCCESS}" == "true" ]]; then
                  echo "Authenticated successfully"
                  break
                fi
                echo "... failed to authenticate this time"

                wait_period=$(($wait_period+10))
                if [ $wait_period -gt 300 ]; then
                  echo "... >5 minutes have elapsed, failing job."
                  exit 1
                else
                  echo "... retrying in 10 seconds"
                  sleep 10
                fi
              done

              echo ""
              echo "================================================================================"
              echo "Wait for c-${DB2_INSTANCE_NAME}-db2u Db2uEngine to report ready (retries every ~10 seconds for max ~5 minutes)"
              echo "================================================================================"
              wait_period=0
              while true; do

                export DB2U_ENGINE_STATE=$(oc get Db2uEngine c-${DB2_INSTANCE_NAME}-db2u -n ${DB2_NAMESPACE} -ojsonpath='{.status.state}')

                echo "... Db2uEngine state: ${DB2U_ENGINE_STATE}"
                if [[ ${DB2U_ENGINE_STATE} == "Ready" ]]; then
                  echo "Db2uEngine c-${DB2_INSTANCE_NAME}-db2u is ready"
                  break
                fi

                wait_period=$(($wait_period+10))
                if [ $wait_period -gt 300 ]; then
                  echo "... >5 minutes have elapsed, failing job."
                  exit 1
                else
                  echo "... retrying in 10 seconds"
                  sleep 10
                fi
              done


      restartPolicy: Never

      serviceAccountName: {{ $sa }}
      volumes:
        - name: db2-credentials
          secret:
            secretName: {{ $secret }}
            defaultMode: 420
            optional: false
  backoffLimit: 4

{{- end }}
