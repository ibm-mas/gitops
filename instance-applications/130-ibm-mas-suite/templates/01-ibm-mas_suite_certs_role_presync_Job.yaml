{{- if and (eq .Values.dns_provider "cis") (eq .Values.mas_manual_cert_mgmt "True") }}

{{ $ns                :=  printf "mas-%s-core" .Values.instance_id }}
{{ $suite_dns_secret  :=  "presync-ibm-suite-certs-role-secret" }}
{{ $hook              :=  "PreSync" }}
{{ $role_name         :=  "presync-ibm-suite-certs-role-r" }}
{{ $sa_name           :=  "presync-ibm-suite-certs-role-sa" }}
{{ $rb_name           :=  "presync-ibm-suite-certs-role-rb" }}
{{ $job_name          :=  "presync-ibm-suite-certs-role-job" }}



---
kind: Secret
apiVersion: v1
metadata:
  name: "presync-ibm-suite-certs-role-secret"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
stringData:
  cis_apikey: "{{ .Values.cis_apikey }}"
  #sm_aws_access_key_id: "{{ .Values.sm_aws_access_key_id }}"
  #sm_aws_secret_access_key: "{{ .Values.sm_aws_secret_access_key }}"
  manual_certs: "{{ .Values.manual_certs }}"
type: Opaque

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "{{ $sa_name }}"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ $role_name }}"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
rules:
  - verbs:
      - get
    apiGroups:
      - ""
    resources:
      - secrets
  - verbs:
      - get
    apiGroups:
      - route.openshift.io
    resources:
      - routes

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ $rb_name }}"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
subjects:
  - kind: ServiceAccount
    name: "{{ $sa_name }}"
    namespace: "{{ $ns }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "{{ $role_name }}"


---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "cluster-{{ $rb_name }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
subjects:
  - kind: ServiceAccount
    name: "{{ $sa_name }}"
    namespace: "{{ $ns }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin

---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $job_name }}"
  generateName: "{{ $job_name }}-"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "130"
    argocd.argoproj.io/hook: "{{ $hook }}"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      containers:
        - name: suite-certs-role-run
          image: quay.io/ibmmas/cli:8.1.0-pre.gitops
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            # dns
            - name: DNS_PROVIDER
              value: "{{ .Values.dns_provider }}"
            - name: MAS_MANUAL_CERT_MGMT
              value: "{{ .Values.mas_manual_cert_mgmt }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"
            - name: MAS_WORKSPACE_ID
              value: "{{ .Values.mas_workspace_id }}"
            - name: MAS_CONFIG_DIR
              value: "{{ .Values.mas_config_dir }}"
            - name: CIS_CRN
              value: "{{ .Values.cis_crn }}"
            - name: CIS_SUBDOMAIN
              value: "{{ .Values.cis_subdomain }}"
            - name: CIS_PROXY
              value: "{{ .Values.cis_proxy }}"

            - name: ACCOUNT
              value: "{{ .Values.account_id }}"
            - name: CLUSTER
              value: "{{ .Values.cluster_id }}"

            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"

          volumeMounts:
            - name: "presync-ibm-suite-certs-role-secret"
              mountPath: /etc/mas/creds/suite_certs_secret
          command:
            - /bin/sh
            - -c
            - |

              set -e
              export MAS_CONFIG_DIR=${MAS_CONFIG_DIR:-"/tmp/suite_certs/configs"}

              export CIS_APIKEY=$(cat /etc/mas/creds/suite_certs_secret/cis_apikey)
              MANUAL_CERTS=$(cat /etc/mas/creds/suite_certs_secret/manual_certs)
              MAS_MANUAL_CERTS_YAML=/etc/mas/creds/suite_certs_secret/manual_certs

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "DNS Provider ........................ ${COLOR_MAGENTA}${DNS_PROVIDER}"
              echo "Manual Cert Mgmt Flag ............... ${COLOR_MAGENTA}${MAS_MANUAL_CERT_MGMT}"
              echo "MAS Instance Id ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
              echo "MAS Workspace ID .................... ${COLOR_MAGENTA}${MAS_WORKSPACE_ID}"
              echo "MAS CONFIG DIR ...................... ${COLOR_MAGENTA}${MAS_CONFIG_DIR}"
              echo "CIS CRN ............................. ${COLOR_MAGENTA}${CIS_CRN}"
              echo "IBM CLOUD APIKEY .................... ${COLOR_MAGENTA}${CIS_APIKEY:0:4}<snip>"
              echo "CIS subdomain ....................... ${COLOR_MAGENTA}${CIS_SUBDOMAIN}"
              echo "CIS proxy ........................... ${COLOR_MAGENTA}${CIS_PROXY}"

              echo "MAS Manual Certs YAML location ...... ${COLOR_MAGENTA}${MAS_MANUAL_CERTS_YAML}"

              echo ""
              echo "================================================================================"

              #create files as suite_cert role requires in MAS_CONFIG_DIR folder
              appList=(
                "core"
                "assist" 
                "iot"
                "manage"
                "monitor"
                "optimizer"  
                "predict"
                "visualinspection"
              )

              if [[ -n "$MAS_MANUAL_CERTS_YAML" ]] && [[ -s "$MAS_MANUAL_CERTS_YAML" ]]; then

                for app in ${appList[@]}; do

                  echo "Copying certs for $app into ${MAS_CONFIG_DIR}/certs/$app/ "
                  mkdir -p ${MAS_CONFIG_DIR}/certs/$app

                  tls_crt_filter_query=.manual_certs.${app}_tls_crt
                  tls_key_filter_query=.manual_certs.${app}_tls_key
                  ca_crt_filter_query=.manual_certs.${app}_ca_crt

                  /usr/bin/yq eval "$tls_crt_filter_query" ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/tls.crt
                  /usr/bin/yq eval "$tls_key_filter_query" ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/tls.key
                  /usr/bin/yq eval "$ca_crt_filter_query"  ${MAS_MANUAL_CERTS_YAML} | base64 --decode > $MAS_CONFIG_DIR/certs/$app/ca.crt

                  echo "Done"
                done  
              fi

              export ROLE_NAME=suite_certs
              ansible-playbook ibm.mas_devops.run_role
              rc=$?
              echo "Role suite_certs completes with rc=${rc}"
              [ $rc -ne 0 ] && exit $rc

              exit 0

      restartPolicy: Never

      serviceAccountName: "{{ $sa_name }}"
      volumes:
        - name: "presync-ibm-suite-certs-role-secret"
          secret:
            secretName: "presync-ibm-suite-certs-role-secret"
            defaultMode: 420
            optional: false

  backoffLimit: 4

{{- end }}