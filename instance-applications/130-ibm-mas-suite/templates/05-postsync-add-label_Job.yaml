# .Values.ingress is passed into the suite as a string (even though the original value is a boolean)
# (see https://github.com/ibm-mas/gitops/blob/d46e6577fc2081e0a5624dddf575cead5310d794/root-applications/ibm-mas-instance-root/templates/130-ibm-mas-suite-app.yaml#L60)
# This meant the check was passing even when ingress was false (.Values.ingress is considered true when it is the string "false")
# Rather than change the suite app (and force it to resync in all existing envs), we'll instead fix the check here to look for either boolean true OR the string "true".
{{- if (eq (toString .Values.ingress) "true") }}

{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- $_job_name_prefix := "mas-route-patch" }}


{{- /*
Use the build/bin/set-cli-image-tag.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_tag := "13.3.0" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := omit .Values "junitreporter" }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v2" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_tag
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print ($_job_config_values | toYaml) $_cli_image_tag $_job_version | adler32sum }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash )}}



{{ $job_label :=  "mas-route-patch" }}
---
# Permit outbound communication by the Job pods
# (Needed to communicate with the K8S HTTP API and AWS SM)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mas-route-np
  namespace: mas-{{ .Values.instance_id }}-core
  annotations:
    argocd.argoproj.io/sync-wave: "140"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job_label }}
  egress:
    - {}
  policyTypes:
    - Egress


---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mas-route-sa
  namespace: mas-{{ .Values.instance_id }}-core
  annotations:
    argocd.argoproj.io/sync-wave: "140"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mas-route-prereq-role-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "140"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - verbs:
      - get
      - list
      - patch
    apiGroups:
      - "route.openshift.io"
    resources:
      - routes
  - verbs:
      - get
      - list
    apiGroups:
      - core.mas.ibm.com
    resources:
      - suites


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mas-route-prereq-rb-{{ .Values.instance_id }}
  annotations:
    argocd.argoproj.io/sync-wave: "141"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: mas-route-sa
    namespace: mas-{{ .Values.instance_id }}-core
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mas-route-prereq-role-{{ .Values.instance_id }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $_job_name }}
  namespace: mas-{{ .Values.instance_id }}-core
  annotations:
    argocd.argoproj.io/sync-wave: "142"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job_label }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:{{ $_cli_image_tag }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: SUITE_NAMESPACE
              value: mas-{{ .Values.instance_id }}-core
          command:
            - /bin/sh
            - -c
            - |

              set -e
              echo
              echo "================================================================================"
              echo "Wait for Suite Routes to be ready and add label type=external to routes"
              echo "================================================================================"
              echo

              echo "Wait for Suite Routes to be ready"
              wait_period=0
              while true; do
                wait_period=$(($wait_period+60))
                if [ $wait_period -gt 3600 ]; then
                  echo "Suite Routes is not ready after 20 minutes of waiting. exiting..."
                  exit 1
                else
                  sleep 60
                fi


                SUITE_NAME=$(oc get Suite -n $SUITE_NAMESPACE -o NAME)
                echo "SUITE_NAME == ${SUITE_NAME}"

                export ROUTES_READY=$(oc get ${SUITE_NAME} -n ${SUITE_NAMESPACE} -o=jsonpath="{.status.conditions[?(@.type=='RoutesReady')].status}")
                echo "ROUTES_READY == ${ROUTES_READY}"

                if [[ "${ROUTES_READY}" == "True" ]]; then
                  echo "Suite Routes are now in ready status"
                  break
                fi
              done

              export routes=$(oc get routes -n ${SUITE_NAMESPACE} -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
              echo "Add label to routes updated ${routes}"

              for route in $routes; do
                echo "Adding label to route - ${route}"
                oc patch route/${route} -p '{"metadata":{"labels":{"type":"external"}}}'
              done
      restartPolicy: Never
      serviceAccountName: "mas-route-sa"
  backoffLimit: 4

{{- end }}

