{{- if and (eq .Values.mas_app_id "visualinspection") (.Values.run_sanity_test) }}

{{ $ns               :=  .Values.mas_app_namespace }}
{{ $np_name          :=  "postsync-sanity-mvi-np" }}
{{ $role_name        :=  "postsync-sanity-mvi-role" }}
{{ $sa_name          :=  "postsync-sanity-mvi-sa" }}
{{ $rb_name          :=  "postsync-sanity-mvi-rb" }}
{{ $tests_cm_name    :=  "postsync-sanity-tests-mvi-cm" }}
{{ $record_cm_name   :=  "postsync-sanity-tests-mvi-record-cm" }}
{{ $job_name         :=  "postsync-sanity-mvi-job" }}



---
# Permit outbound communication by the Job pod
# (Needed to communicate with the K8S HTTP API, PyPI, MVI Route)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $np_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "600"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job_name }}
  egress:
    - {}
  policyTypes:
    - Egress


---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ $sa_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "600"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}



---
# -------------------------------------
# MVI Verification tests needs to get the MVI api key secret and the MVI route resources
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $role_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "600"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
  - verbs:
      - get
      - list
    apiGroups:
      - ""
    resources:
      - secrets
      - pods
  - verbs:
      - get
    apiGroups:
      - "route.openshift.io"
    resources:
      - routes

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $rb_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "601"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: {{ $sa_name }}
    namespace: {{ $ns }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $role_name }}


---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $tests_cm_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "602"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
immutable: false
data:
  requirements.txt: |-
    pytest
    requests
    kubernetes
    openshift
    semver
  tests.py: |-
    from kubernetes import client,config
    from kubernetes.client import Configuration
    from openshift.dynamic import DynamicClient
    import pytest
    import os
    import requests
    import certifi
    import semver
    import tempfile
    import base64

    # e.g. "dclain-1a"
    mas_instance_id = os.getenv("MAS_INSTANCE_ID")
    if mas_instance_id is None:
      raise Exception(f"Required MAS_INSTANCE_ID environment variable is not set")

    # e.g. "masdev"
    mas_workspace_id = os.getenv("MAS_WORKSPACE_ID")
    if mas_workspace_id is None:
      raise Exception(f"Required MAS_WORKSPACE_ID environment variable is not set")

    mvi_namespace = f"mas-{mas_instance_id}-visualinspection"
    mvi_route_name = f"{mas_instance_id}-{mas_workspace_id}"

    @pytest.fixture(scope="session")
    def dyn_client():
      if "KUBERNETES_SERVICE_HOST" in os.environ:
        config.load_incluster_config()
        k8s_config = Configuration.get_default_copy()
        k8s_client = client.api_client.ApiClient(configuration=k8s_config)
      else:
        k8s_client = config.new_client_from_config()
      dyn_client = DynamicClient(k8s_client)
      yield dyn_client

    @pytest.fixture(scope="session")
    def v1_pods(dyn_client):
      yield dyn_client.resources.get(api_version='v1', kind='Pod')

    @pytest.fixture(scope="session")
    def get_usage_pod(v1_pods):
        usage_pod = v1_pods.get(label_selector="app.kubernetes.io/name=usage-hourly-job", namespace=mvi_namespace)
        if not usage_pod.items:
            assert False, f"Could not find any usage-hourly-job in {mvi_namespace}"
        yield usage_pod

    @pytest.fixture(scope="session")
    def v1_secrets(dyn_client):
      yield dyn_client.resources.get(api_version='v1', kind='Secret')

    @pytest.fixture(scope="session")
    def v1_routes(dyn_client):
      yield dyn_client.resources.get(api_version='route.openshift.io/v1', kind='Route')

    @pytest.fixture(scope="session")
    def mvi_route(v1_routes):
      yield v1_routes.get(name=mvi_route_name, namespace=mvi_namespace)

    @pytest.fixture(scope="session")
    def mvi_host(mvi_route):
      try:
        yield mvi_route['spec']['host']
      except KeyError as e:
        assert False, f"Unable to determine MVI host; spec.host key not present in {mvi_route_name}/{mvi_namespace}: {mvi_route}. Error details: {e}"

    @pytest.fixture(scope="session")
    def mvi_host_ca_filepath(mvi_route):

      # Read the certificate field from the MVI Route. 
      # This may include CA certificates that we need in order to trust the certificates presented by the external MVI endpoint.
      try:
        mvi_route_certificate = mvi_route['spec']['tls']['certificate']
      except KeyError as e:
        pass

      # Read the caCertificate field from the MVI Route. 
      # This may include CA certificates that we need in order to trust the certificates presented by the external MVI endpoint.
      try:
        mvi_route_caCertificate = mvi_route['spec']['tls']['caCertificate']
      except KeyError as e:
        pass

      # Load default CA bundle. This will include certs for well-known CAs. This ensures that we will
      # trust the certificates presented by the external MVI endpoints when MAS is configured to use
      # an external frontend like CIS.
      with open(certifi.where(), 'rb') as default_ca:
        default_ca_content = default_ca.read()

      # Combine all of the above into a single .pem file that we can use when issuing HTTP requests
      chain_file = tempfile.NamedTemporaryFile(delete=False)
      try:
        
        if mvi_route_certificate:
          chain_file.write(mvi_route_certificate.encode())
        
        if mvi_route_caCertificate:
          chain_file.write(mvi_route_caCertificate.encode())

        chain_file.write(default_ca_content)

        chain_file.flush()
        chain_file.close()

        yield chain_file.name

      finally:
        os.remove(chain_file.name)

    @pytest.fixture(scope="session")
    def mvi_version(mvi_host, mvi_host_ca_filepath):
      resp = requests.get(
        f"https://{mvi_host}/api/version-info",
        verify=mvi_host_ca_filepath
      )
      resp_json = resp.json()
      assert resp.status_code == 200, f"Expected status 200 from GET /api/version-info, but got {resp.status_code}. Body: {resp_json}."
      try:
        raw_version_str = resp_json['version']
        stripped_version = raw_version_str.split("-")[0]
        return semver.VersionInfo.parse(stripped_version)
      except KeyError as e:
        assert False, f"Expected version key not found in response from GET /api/version-info. Body: {resp_json}"

    @pytest.fixture(scope="session")
    def mvi_apikey(v1_secrets, mvi_version):
      '''
      Obtaining this API key is only currently possible in MVI versions >= 8.9.2, so any test
      that attempts to use this fixture against MVI < 8.9.2 will be skipped at present
      '''
      if mvi_version.compare("8.9.2") < 0:
        pytest.skip("MVI API Key secret required by this test is only currently available in MVI >= 8.9.2")

      mvi_apikey_secret = v1_secrets.get(label_selector="app.kubernetes.io/name=visualinspection-dnn-secret", namespace=mvi_namespace)
      if not mvi_apikey_secret:
        assert False, f"Could not find any visual inspection dnn secret in {mvi_namespace}"

      mvi_apikey_secret_name = mvi_apikey_secret.items[0]['metadata']['name']
      try:
        dnn_apikey_b64 = mvi_apikey_secret.items[0]['data']['dnn-apikey']
      except:
        assert False, "Expected data.dnn-apikey field not present in secret {mvi_apikey_secret_name} in {mvi_namespace}"
      yield base64.b64decode(dnn_apikey_b64)

    def test_usage_reporter(get_usage_pod):
      print("Test usage reporter")
      assert get_usage_pod.items[0].status['phase'] == 'Succeeded'

    def test_bgtasks_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/bgtasks",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_dltasks_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/dltasks",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_trained_models_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/trained-models",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_webapis_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/webapis",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_apikeys_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/apikeys",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 404
      assert resp.json()['fault'] == "AIVVS0351E: Could not find an API Key for user \"__dnn_user\"."

    def test_dlm_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/dlm/policies",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_datasets_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/datasets",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_create_demo_dataset_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.post(
        f"https://{mvi_host}/api/datasets",
        headers={
        'X-Auth-Token': mvi_apikey,
        'Content-Type': 'application/json'
        },
        data='{"name": "Demo Dataset"}',
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200
      pytest.dataset_id = resp.json()["dataset_id"]

    def test_delete_demo_dataset_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.delete(
        f"https://{mvi_host}/api/datasets/{pytest.dataset_id}",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_uploads_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/uploads",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_profiles_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/profiles",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_system_configs_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/system-configs",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_projects_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.get(
        f"https://{mvi_host}/api/projects",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    def test_create_demo_project_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.post(
        f"https://{mvi_host}/api/projects",
        headers={
        'X-Auth-Token': mvi_apikey,
        'Content-Type': 'application/json'
        },
        data='{"name": "Demo Project"}',
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200
      assert resp.json()['name'] == "Demo Project"
      pytest.project_id = resp.json()["_id"]

    def test_delete_demo_project_api(mvi_host, mvi_host_ca_filepath, mvi_apikey):
      resp = requests.delete(
        f"https://{mvi_host}/api/projects/{pytest.project_id}",
        headers={
        'X-Auth-Token': mvi_apikey
        },
        verify=mvi_host_ca_filepath
      )
      assert resp.status_code == 200

    @pytest.mark.skip(reason="Placeholder")
    def test_import_model():
        print("Placeholder for sanity tests to be added")

    @pytest.mark.skip(reason="Placeholder")
    def test_deploy_model():
        print("Placeholder for sanity tests to be added")

    @pytest.mark.skip(reason="Placeholder")
    def test_inference_model():
        print("Placeholder for sanity tests to be added")



---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $job_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "604"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job_name }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      imagePullSecrets: []
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"
            - name: MAS_WORKSPACE_ID
              value: "{{ .Values.mas_workspace_id }}"
          volumeMounts:
            - name: tests
              mountPath: /tmp/tests
          command:
            - /bin/sh
            - -c
            - |
              pip install -r /tmp/tests/requirements.txt
              pytest -o cache_dir=/tmp/__pycache__ /tmp/tests/tests.py

      restartPolicy: Never
      serviceAccountName: {{ $sa_name }}
      volumes:
        - name: tests
          configMap:
            name: {{ $tests_cm_name }}
            items:
              - key: requirements.txt
                path: requirements.txt
              - key: tests.py
                path: tests.py
            defaultMode: 420
            optional: false
  backoffLimit: 4

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $record_cm_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "605"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
  labels:
      type: mas-app-verification-record
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
immutable: false
data:
  mas_app: "visualinspection"
  mas_catalog_version: "{{ .Values.mas_catalog_version }}"

{{- end }}
