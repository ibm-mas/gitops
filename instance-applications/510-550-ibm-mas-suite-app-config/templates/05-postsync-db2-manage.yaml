{{- if eq .Values.mas_app_id "manage" }}

{{ $db2_namespace      := printf "db2u-%s" .Values.instance_id }}
{{ $ns                 := .Values.mas_app_namespace }}
{{ $np_name            := "postsync-manage-db2-np" }}
{{ $role_name          := printf "postsync-manage-db2-role-%s" .Values.mas_app_id }}
{{ $sa_name            := "postsync-manage-db2-sa" }}
{{ $rb_name            := printf "postsync-manage-db2-rb-%s" .Values.mas_app_id }}
{{ $job_name           := "postsync-manage-db2-job" }}

# TODO: hard-coded for now, but should be passing this in
{{ $db2_dbname        := "BLUDB" }}


# TODO: set all syncwaves to low values so this runs first for testing
# change this before delivery!

---
# Permit outbound communication by the Job pod
# (Needed to communicate with the K8S HTTP API)
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $np_name }}
  namespace: {{ $ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "0"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job_name }}
  egress:
    - {}
  policyTypes:
    - Egress

---
# Service account that is authorized to exec into db2u pod
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "{{ $sa_name }}"
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "0"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}


---
# Role permitting exec into db2u pod
# NOTE: created in db2u namespace
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ $role_name }}"
  namespace: "{{ $db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "0"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - get
    - list
- apiGroups:
    - ""
  resources:
    - pods/exec
  verbs: 
    - create
    - get
    - list

---
# RoleBinding from the Role in the db2u namespace to the Job's ServiceAccount in the app namespace
# NOTE: created in db2u namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ $rb_name }}"
  namespace: "{{ $db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "0"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: "{{ $sa_name }}"
    namespace: "{{ $ns }}"
roleRef:
  kind: Role
  name: "{{ $role_name }}"
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: batch/v1
kind: Job
metadata:
  # Suffix the Job name with a hash of all chart values
  # This is to ensure that ArgoCD will delete and recreate the job if anything changes in the application config
  # The job is idempotent
  name: {{ $job_name }}-v1-{{ omit .Values "junitreporter" | toYaml | adler32sum }}
  namespace: "{{ $ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "1"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job_name }}
{{- if .Values.custom_labels }}
{{ .Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
            - name: DB2_NAMESPACE
              value: "{{ $db2_namespace }}"
            - name: DB2_DBNAME
              value: "{{ $db2_dbname }}"
            - name: MAS_INSTANCE_ID
              value: "{{ .Values.instance_id }}"

          volumeMounts: []
          command:
            - /bin/sh
            - -c
            - |

              set -e
              source /mascli/functions/gitops_utils

              DB2_POD_NAME="c-db2wh-${INSTANCE_ID}-manage-db2u-0"

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "MAS_INSTANCE_ID ..................... ${MAS_INSTANCE_ID}"
              echo "DB2_DBNAME .......................... ${DB2_DBNAME}"
              echo "AVP_TYPE ............................ ${AVP_TYPE}"
              echo "DB2_NAMESPACE ....................... ${DB2_NAMESPACE}"
              echo "DB2_POD_NAME ........................ ${DB2_POD_NAME}"

              # Path to the generated script, on both this pod and on the db2u pod
              ALTERSEQ_SH_PATH="/tmp/alterseq.sh"

              echo ""
              echo "Create ${ALTERSEQ_SH_PATH}"
              echo "--------------------------------------------------------------------------------"

              # Generate a script to copy and run on the db2u pod
              cat > ${ALTERSEQ_SH_PATH} << EOF
                #!/bin/bash
                db2 connect to ${DB2_DBNAME}
                if [ \$? != 0 ]; then
                  echo "Failed to connect to database!"
                  exit 1
                fi

                SQL_PATH="${ALTERSEQ_SH_PATH}.sql"

                db2 "select 'alter sequence maximo.' || sequencename || ' cache 500;' from maximo.maxsequence" | grep "alter sequence" > ${SQL_PATH}
                echo "alter sequence maximo.maxseq cache 2000;" >> ${SQL_PATH}

                cat ${SQL_PATH}

                # db2 -tvf ${SQL_PATH} | tee ${SQL_PATH}.log
            EOF
              # IMPORTANT: Do not make any changes to the "EOF" line above (including its indentation)

              cat ${ALTERSEQ_SH_PATH}

              chmod +x ${ALTERSEQ_SH_PATH}

              echo ""
              echo "Copy ${ALTERSEQ_SH_PATH} to ${DB2_NAMESPACE}/${DB2_POD_NAME}"
              echo "--------------------------------------------------------------------------------"
              oc cp ${ALTERSEQ_SH_PATH} ${DB2_NAMESPACE}/${DB2_POD_NAME}:${ALTERSEQ_SH_PATH} -c db2u || exit $?

              echo ""
              echo "Executing ${ALTERSEQ_SH_PATH} file on ${DB2_NAMESPACE}/${DB2_POD_NAME}"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} ${DB2_POD_NAME} -- su -lc "${ALTERSEQ_SH_PATH} | tee ${ALTERSEQ_SH_PATH}.log" db2inst1 || exit $?

      restartPolicy: Never
      serviceAccountName: "{{ $sa_name }}"
      volumes: []
  backoffLimit: 4
{{- end }}
