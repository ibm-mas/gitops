{{- if eq .Values.mas_app_id "manage" }}
{{- if not (empty .Values.manage_db2u_databases) }}




{{ $manage_ns          := .Values.mas_app_namespace }}
{{ $np_name            := "postsync-manage-db2-np" }}
{{ $sa_name            := "postsync-manage-db2-sa" }}
{{ $job_label          := "postsync-manage-db2-job" }}

---
{{- /*
  Permit outbound communication by the Job pod (Needed to communicate with the K8S HTTP API)
  This single policy is shared by all per-db2 job instances, sit identifies these jobs by $job_label (which is the same for all)
*/}}
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $np_name }}
  namespace: {{ $manage_ns }}
  annotations:
    argocd.argoproj.io/sync-wave: "700"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      app: {{ $job_label }}
  egress:
    - {}
  policyTypes:
    - Egress

---
{{- /*
  Service account that is authorized to exec into db2u pod
  This single service account is shared by all per-db2 job instances
  Each per-db2 job is assigned its own role (in the db2 namespace) which is bound to this service account
*/}}
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "{{ $sa_name }}"
  namespace: "{{ $manage_ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "700"
{{- if .Values.custom_labels }}
  labels:
{{ .Values.custom_labels | toYaml | indent 4 }}
{{- end }}






{{- /*
  A separate Job is created in the manage namespace per DB2 instance reserved for use by Manage.
  For each Job a separate Role and RoleBinding is created in the db2 namespace to permit pod exec access to the (single) service account assigned to each Job.

  NOTE: Most likely there will only ever be a single DB2 reserved for use by Manage; i.e. exactly 1 entry in ibm-db2u-databases.yaml with mas_application_id: "manage".
        But our config model (in theory) permits more than one, so it seems prudent to ensure this post Manage-sync DB2 maintenance Job is executed against all.

  NOTE: When inside the range loop below, make sure you prefix any references to chart values NOT under .Values.manage_db2u_databases with $.
        For example: {{ $.Values.custom_labels }} (instead of {{ .Values.custom_labels }} )
*/}}
{{- range $i, $db := .Values.manage_db2u_databases }}




{{- /*
Meaningful prefix for the job resource name. Must be under 52 chars in length to leave room for the 11 chars reserved for '-' and $_job_hash.
*/}}
{{- /*
Although multiple jobs could potentially be run in the same namespace,
we don't need to differentiate by instance in the name; the _job_hash appended to job name
will take care of differentiating the jobs.
*/}}
{{- $_job_name_prefix := "postsync-manage-db2-job" }}

{{- /*
Use the build/bin/set-cli-image-tag.sh script to update this value across all charts.
Included in $_job_hash (see below).
*/}}
{{- $_cli_image_tag := "13.2.0" }}

{{- /*
A dict of values that influence the behaviour of the job in some way.
Any changes to values in this dict will trigger a rerun of the job.
Since jobs must be idemopotent, it's generally safe to pass in values here that are not
strictly necessary (i.e. including some values that don't actually influence job behaviour).
We may want to refine this further though for jobs that can take a long time to complete.
Included in $_job_hash (see below).
*/}}
{{- $_job_config_values := $db }}

{{- /*
Increment this value whenever you make a change to an immutable field of the Job resource.
E.g. passing in a new environment variable.
Included in $_job_hash (see below).
*/}}
{{- $_job_version := "v2" }}

{{- /*
10 char hash appended to the job name taking into account $_job_config_values, $_job_version and $_cli_image_tag
This is to ensure ArgoCD will create a new job resource intead of attempting (and failing) to update an
immutable field of any existing Job resource.
*/}}
{{- $_job_hash := print  ( $_job_config_values  |  toYaml ) $_cli_image_tag  $_job_version  |  adler32sum  }}

{{- $_job_name := join "-" (list $_job_name_prefix $_job_hash) }}





{{ $db2_namespace      := $db.db2_namespace }}
{{ $db2_dbname         := $db.db2_dbname }}
{{ $db2_instance_name  := $db.db2_instance_name }}
{{ $role_name          := printf "postsync-manage-db2-role-%s" $db2_instance_name }}
{{ $rb_name            := printf "postsync-manage-db2-rb-%s"   $db2_instance_name }}

---
{{- /*
  Role permitting exec into db2u pod
  NOTE: created in db2u namespace
*/}}
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ $role_name }}"
  namespace: "{{ $db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "700"
{{- if $.Values.custom_labels }}
  labels:
{{ $.Values.custom_labels | toYaml | indent 4 }}
{{- end }}
rules:
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - get
    - list
- apiGroups:
    - ""
  resources:
    - pods/exec
  verbs: 
    - create
    - get
    - list

---
{{- /*
  RoleBinding from the Role in the db2u namespace to the Job ServiceAccount in the app namespace
  NOTE: created in db2u namespace
*/}}
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ $rb_name }}"
  namespace: "{{ $db2_namespace }}"
  annotations:
    argocd.argoproj.io/sync-wave: "701"
{{- if $.Values.custom_labels }}
  labels:
{{ $.Values.custom_labels | toYaml | indent 4 }}
{{- end }}
subjects:
  - kind: ServiceAccount
    name: "{{ $sa_name }}"
    namespace: "{{ $manage_ns }}"
roleRef:
  kind: Role
  name: "{{ $role_name }}"
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: batch/v1
kind: Job
metadata:
  # Suffix the Job name with a hash of all chart values
  # This is to ensure that ArgoCD will delete and recreate the job if anything changes in the application config
  # The job is idempotent
  name: {{ $_job_name }}
  namespace: "{{ $manage_ns }}"
  annotations:
    argocd.argoproj.io/sync-wave: "702"
{{- if $.Values.custom_labels }}
  labels:
{{ $.Values.custom_labels | toYaml | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      labels:
        app: {{ $job_label }}
{{- if $.Values.custom_labels }}
{{ $.Values.custom_labels | toYaml | indent 8 }}
{{- end }}
    spec:
      containers:
        - name: run
          image: quay.io/ibmmas/cli:{{ $_cli_image_tag }}
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 64Mi
          env:
            # Hard-coded for now:
            - name: AVP_TYPE
              value: "aws"
            - name: DB2_NAMESPACE
              value: "{{ $db2_namespace }}"
            - name: DB2_DBNAME
              value: "{{ $db2_dbname }}"
            - name: DB2_INSTANCE_NAME
              value: "{{ $db2_instance_name }}"
            - name: OPERATIONAL_MODE
              value: "{{ $.Values.operational_mode }}"

          volumeMounts: []
          command:
            - /bin/sh
            - -c
            - |

              set -e
              source /mascli/functions/gitops_utils

              DB2_POD_NAME="c-${DB2_INSTANCE_NAME}-db2u-0"

              echo ""
              echo "================================================================================"
              echo "Settings"
              echo "================================================================================"
              echo "DB2_INSTANCE_ID ..................... ${DB2_INSTANCE_NAME}"
              echo "DB2_DBNAME .......................... ${DB2_DBNAME}"
              echo "AVP_TYPE ............................ ${AVP_TYPE}"
              echo "DB2_NAMESPACE ....................... ${DB2_NAMESPACE}"
              echo "DB2_POD_NAME ........................ ${DB2_POD_NAME}"
              echo "OPERATIONAL_MODE .................... ${OPERATIONAL_MODE}"

              # Path to the generated script, on both this pod and on the db2u pod
              UPDATE_DB2_SH_PATH="/tmp/postsync_db2_manage.sh"

              echo ""
              echo "Create ${UPDATE_DB2_SH_PATH}"
              echo "--------------------------------------------------------------------------------"

              # Generate a script to copy and run on the db2u pod
              cat > ${UPDATE_DB2_SH_PATH} << EOF
                #!/bin/bash
                db2 connect to ${DB2_DBNAME}
                if [ \$? != 0 ]; then
                  echo "Failed to connect to database!"
                  exit 1
                fi

                db2 "select 'alter sequence maximo.' || sequencename || ' cache 500;' from maximo.maxsequence" | grep "alter sequence" > "/tmp/alter_seq.sql"
                echo "alter sequence maximo.maxseq cache 2000;" >> "/tmp/alter_seq.sql"

                db2 -tvf "/tmp/alter_seq.sql" | tee "/tmp/alter_seq.sql.log" || exit \$?
              EOF
              # IMPORTANT: Do not make any changes to the "EOF" line above (including its indentation)

              # Disable destructive/disruptive API routes if this is a production instance.
              # Otherwise (re)enable them
              ROUTES_ACTIVE=$([[ "${OPERATIONAL_MODE}" == "production" ]] && echo "0" || echo "1")
              # (see https://jsw.ibm.com/browse/MASCORE-4639)
              cat >> ${UPDATE_DB2_SH_PATH} << EOF
                db2 "update maximo.apiroute set active=${ROUTES_ACTIVE} where route in ('icheckerrepair','managestart','icheckerreport', 'managestop');" | tee "/tmp/disable_routes.log" || exit \$?
              EOF
              # IMPORTANT: Do not make any changes to the "EOF" line above (including its indentation)

              cat ${UPDATE_DB2_SH_PATH}

              chmod +x ${UPDATE_DB2_SH_PATH}

              echo ""
              echo "Copy ${UPDATE_DB2_SH_PATH} to ${DB2_NAMESPACE}/${DB2_POD_NAME}"
              echo "--------------------------------------------------------------------------------"
              oc cp ${UPDATE_DB2_SH_PATH} ${DB2_NAMESPACE}/${DB2_POD_NAME}:${UPDATE_DB2_SH_PATH} -c db2u || exit $?
              echo "... done"

              echo ""
              echo "Executing ${UPDATE_DB2_SH_PATH} file on ${DB2_NAMESPACE}/${DB2_POD_NAME}"
              echo "--------------------------------------------------------------------------------"
              oc exec -n ${DB2_NAMESPACE} ${DB2_POD_NAME} -- su -lc "${UPDATE_DB2_SH_PATH} | tee ${UPDATE_DB2_SH_PATH}.log" db2inst1 || exit $?

      restartPolicy: Never
      serviceAccountName: "{{ $sa_name }}"
      volumes: []
  backoffLimit: 4

{{- end }}
{{- end }}
{{- end }}