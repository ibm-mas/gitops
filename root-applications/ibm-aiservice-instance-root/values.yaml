---

avp:
  name: "argocd-vault-plugin-helm"
  secret: ""
  values_varname: "HELM_VALUES"

account:
  id: dev

cluster:
  id: cluster1

region:
  id: region1 

instance:
  id: inst1

tenant:
  id: tenant1

generator:
  repo_url: xxxx
  
source:
  repo_url: "https://github.com/ibm-mas/gitops"
  revision: "poc"

# Customers will definitely need to customise this (our gitops-envs/mas-dev repos are private),
# So deliberately not specifying defaults here; we want charts to refuse to render if these are not specified
# Both of these correspond to requirement arguments of the gitops-bootstrap CLI function (--github-url and --github-revision)
# generator:
#   repo_url: ""
#   revision: ""

# These defaults align with the ArgoCD worker setup by gitops-bootstrap
# (openshift-gitops with a single ArgoCD project "mas")
argo:
  namespace: "openshift-gitops"
  projects:
    rootapps: "mas"
    apps: "mas"


auto_delete: false

sm:
  aws_access_key_id: xxxx

run_sanity_test: false

devops:
  mongo_uri:
  build_number:

ibm_minio:
  minio_namespace: "minio_namespace"
  minio_instance_name: "minio"
  minio_root_user: "minio"
  minio_root_password: ""
  minio_storage_class: "default"
  minio_storage_size: "40Gi"
  minio_image: "quay.io/minio/minio:latest"


ibm_odh:
  openshift_namespace: "openshift-operators"
  odh_pipeline_channel: "latest"
  odh_pipeline_installplan: "Automatic"
  service_mesh_namespace: "openshift-serverless"
  service_mesh_channel: "stable"
  service_mesh_catalog_source: "redhat-operators"
  serverless_channel: "stable"
  authorino_catalog_source: "community-operators"
  odh_channel: "fast"
  odh_catalog_source: "community-operators"
  odh_operator_version: "opendatahub-operator.v2.11.1"
  #Odh_Pipeline_operator
  odh_pipeline_name: "openshift-pipelines-operator"
  odh_pipeline_namespace: "openshift-operators"
  odh_pipeline_operatorName: "openshift-pipelines-operator-rh"
  odh_pipeline_source: "redhat_operators"
  odh_pipeline_sourceNamespace: "openshift_marketplace"

  #Serverless Operator
  serverless_namespace: "openshift-serverless"
  serverless_operator_name: "serverless-operator"
  serverless_operator_source: "redhat-operators"
  serverless_operator_sourceNamespace: "openshift-marketplace"

  #opendatahub Operator
  opendatahub_OperatorGroup_name: "opendatahub-operator-group"
  opendatahub_name: "opendatahub-operator"
  opendatahub_namespace: "opendatahub"
  opendatahub_installPlanApproval: "Manual"
  opendatahub_channel: "fast"
  opendatahub_source: "community-operators"
  opendatahub__sourceNamespace: "openshift-marketplace"

  aiservice_namespace: "mas_sremat_aiservice"
  pull_secret_name: "ibm_entitlement"
  mas_aiservice_storage_provider: "minio"
  mas_aiservice_storage_accesskey: ""
  mas_aiservice_storage_secretkey: ""
  mas_aiservice_storage_host: "mas_aiservice_storage_host"
  mas_aiservice_storage_port: "mas_aiservice_storage_port"
  mas_aiservice_storage_ssl: "mas_aiservice_storage_ssl"
  mas_aiservice_storage_region: "mas_aiservice_storage_region"

  # MariaDB
  mas_aiservice_db_host: "mas_aiservice_db_host"
  mas_aiservice_db_port: "mas_aiservice_db_port"
  mas_aiservice_db_user: "mas_aiservice_db_user"
  mas_aiservice_db_database: "mas_aiservice_db_database"

  mas_aiservice_db_secret_key: "mas_aiservice_db_secret_key"
  mas_aiservice_db_secret_name: "mas_aiservice_db_secret_name"
  mas_aiservice_db_secret_value: "mas_aiservice_db_secret_value"

  mas_aiservice_storage_pipelines_bucket: "mas_aiservice_storage_pipelines_bucket"
  primary_storage_class: "nfs-client"


ibm_kmodel:
  aiservice_instance_id: "aiservice_instance_id"
  aiservice_internal_tls: "aiservice_internal_tls"
  aiservice_namespace: "mas-sremat-aiservice"

  mas_aiservice_storage_provider: "minio"
  mas_aiservice_storage_ssl: "false"

  openshift_namespace: "openshift-operators"
  run_sync_hooks: true
  

  # following are the variable need to injected via environment variable 
  mas_aiservice_storage_accesskey: "mas_aiservice_storage_accesskey"
  mas_aiservice_storage_secretkey: "mas_aiservice_storage_secretkey"
  mas_aiservice_storage_host: "mas_aiservice_storage_host"
  mas_aiservice_storage_port: "mas_aiservice_storage_port"
  mas_aiservice_storage_region: "mas_aiservice_storage_region"
  ssh_secret_name: "sremat-kmodel-aiservice-tls"
  # vars file for kmodels
  pullSecretName: "pullSecretName"
  docker_server: "MAS_ICR_CP/aiservice"
  tenantNamespace: "aiservice-MAS_AISERVICE_TENANT_NAME"
  # mas_aiservice_provision_tenant: "MAS_AISERVICE_PROVISION_TENANT"
  primary_storage_class: "PRIMARY_STORAGE_CLASS"
  # Bucket names
  mas_aiservice_storage_templates_bucket: "mas_aiservice_storage_templates_bucket"
  mas_aiservice_storage_tenants_bucket: "mas_aiservice_storage_tenants_bucket"
  mas_aiservice_storage_pipelines_bucket: "mas_aiservice_storage_pipelines_bucket"
  #container images
  image_store: "MAS_ICR_CP/aiservice/store:1.0.2"
  image_watcher: "MAS_ICR_CP/aiservice/watcher:1.0.2-pre.dev10x"
  image_controller: "MAS_ICR_CP/aiservice/controller:1.0.2-pre.dev10x"
  mas_aiservice_pipeline_steps_tag: 1.0.0
  mas_aiservice_connector_tag: 1.0.0

  # model
  # model_id_unique_length: "model_id_unique_length"
  # model_id_prefix: "model_id_prefix"

  # Source container registry
  # -----------------------------------------------------------------------------
  # mas_icr_cp: "cp.icr.io/cp"
  mas_icr_cp: "docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"

ibm_aiservice:
  aiservice_instance_id: aiservice_instance_id
  aiservice_namespace: 'mas-{{ aiservice_instance_id }}-aiservice'
  mas_aiservice_storage_secret: "mas_aiservice_storage_secret"
  # Minio
  mas_aiservice_storage_accesskey: "mas_aiservice_storage_accesskey"
  mas_aiservice_storage_secretkey: "mas_aiservice_storage_secretkey"
  # MariaDB
  mas_aiservice_mariadb_secret: "mas_aiservice_mariadb_secret"
  mas_aiservice_db_user: "mas_aiservice_db_user"
  mas_aiservice_db_secret_value: "mas_aiservice_db_secret_value"

  # WatsonX
  mas_aiservice_watsonx_secret: "mas_aiservice_watsonx_secret"
  mas_aiservice_watsonxai_apikey: "MAS_AISERVICE_WATSONXAI_APIKEY"
  mas_aiservice_watsonxai_url: "MAS_AISERVICE_WATSONXAI_URL"
  mas_aiservice_watsonxai_project_id: "MAS_AISERVICE_WATSONXAI_PROJECT_ID"

  # S3
  s3_apikey: "S3_APIKEY"
  mas_aiservice_storage_accesskey: "true"
  mas_aiservice_storage_secretkey: "MAS_AISERVICE_STORAGE_SECRETKEY"

  mas_aiservice_storage_host: "true"
  mas_aiservice_storage_port: "true"

  # SLS
  mas_aiservice_sls_registration_key_secret: "sls-registration-key"

  mas_aiservice_db_host: "mas_aiservice_db_host"
  mas_aiservice_db_port: "mas_aiservice_db_port"
  mas_aiservice_db_secret_name: "mas_aiservice_db_secret_name"

  # Bucket names
  mas_aiservice_storage_pipelines_bucket: "MAS_AISERVICE_STORAGE_PIPELINES_BUCKET"
  mas_aiservice_storage_tenants_bucket: "mas_aiservice_storage_tenants_bucket"
  mas_aiservice_storage_templates_bucket: "MAS_AISERVICE_STORAGE_TEMPLATES_BUCKET"

  slscfg_registration_key: "slscfg_registration_key"

  #  DRO
  mas_aiservice_dro_token_secret: "dro-token"
  mas_aiservice_dro_cacert_secret: "dro-certificates"

  drocfg_ca: "drocfg_ca"
  drocfg_registration_key: "drocfg_registration_key"
  drocfg_url: "drocfg_url"


  # JDBC
  mas_aiservice_db2_jdbc_secret: "aiservice-jdbccfg"

  jdbccfg_username: "jdbccfg_username"
  jdbccfg_password: "jdbccfg_password"
  jdbccfg_url: "jdbccfg_url"
  jdbccfg_sslenabled: "jdbccfg_sslenabled"
  jdbccfg_ca: "jdbccfg_ca"

  # MAS Entitlement
  #mas_entitlement_username: "cp"
  mas_entitlement_username: "docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"
  mas_entitlement_key: "mas_entitlement_key"

  # Development Registry Entitlement
  artifactory_username: "artifactory_username"
  artifactory_token: "artifactory_token"

  # Environment Variable:
  mas_app_channel: "mas_app_channel"

  # aiservice vars
  mas_catalog_source: "mas_catalog_source"
  
  # Source container registry
  # -----------------------------------------------------------------------------
  # mas_icr_cp: "cp.icr.io/cp"
  # mas_icr_cpopen: "icr.io/cpopen"
  mas_icr_cp: "docker-na-public.artifactory.swg-devops.com/wiotp-docker-local"
  mas_icr_cpopen: "docker-na-public.artifactory.swg-devops.com/wiotp-docker-local/cpopen"

  cluster_domain: cluster_domain
  in_saas_env: "in_saas_env"
  route_type: "route_type"
  mas_aiservice_s3_endpoint_url: "mas_aiservice_s3_endpoint_url"
  mas_aiservice_s3_region: "mas_aiservice_s3_region"
  mas_aiservice_s3_bucket_prefix: "mas_aiservice_s3_bucket_prefix"
  environment_type: "environment_type"

ibm_aiservice_tenant:
  # aiservice
  tenant_id: "aiservice-tenant01"
  aiservice_namespace: "aiservice-inst-1-aiservice"
  aiservice_instance_id: "aiservice-inst-1"
  tenantNamespace: "aiservice-t1"

  mas_icr_cp: "cp.icr.io/cp"
  mas_icr_cpopen: "icr.io/cpopen"

  # dro
  drocfg_url: "https://ibm-data-reporter-redhat-marketplace.apps.sremat-demo1.cp.fyre.ibm.com"
  drocfg_ca: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/droai#drocfg_ca_tenant>"
  drocfg_registration_key: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/droai#drocfg_registration_key>"

  # sls
  slscfg_ca_tenant: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/sls#slscfg_ca_tenant>"
  slscfg_url: "https://sls.ibm-sls.ibm-sls.apps.sremat-demo1.cp.fyre.ibm.com"
  slscfg_registration_key: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/sls#slscfg_registration_key>"
  aiservice_sls_subscription_id: "001"
  
  rsl_url: "http://sandbox43-1.fyre.ibm.com:3001/api/v3/vector/query"
  rsl_org_id: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/rsl#rsl_org_id>"
  rsl_token: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/rsl#rsl_token>"
  rsl_ca_crt: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/rsl#rsl_ca_crt>"

  
  # watsonx
  aiservice_watsonxai_url: "https://us-south.ml.cloud.ibm.com"
  aiservice_watsonxai_project_id: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/watsonx#watsonxai_project_id>"
  aiservice_watsonxai_apikey: "<path:arn:aws:secretsmanager:us-east-2:435377327995:secret:fyre-dev/sremat-demo1/watsonx#watsonxai_apikey>"
  aiservice_watsonx_full: "false"
  aiservice_watsonx_instance_id: ""
  aiservice_watsonx_version: ""
  aiservice_watsonx_username: ""

  tenant_entitlement_type: "standard"
  tenant_entitlement_start_date: "2025-06-11"
  tenant_entitlement_end_date: "2049-11-11"
  
  aiservice_operator_log_level: "2"